Index: src/com/se1/dao/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/dao/User.java	(revision )
+++ src/com/se1/dao/User.java	(revision )
@@ -0,0 +1,60 @@
+package com.se1.dao;
+
+/**
+ * Created by Abhitej on 2/19/2015.
+ */
+public class User {
+    private String emailId;
+    private String password;
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+    private String firstName;
+    private String lastName;
+
+    public int getLoggedIn() {
+        return loggedIn;
+    }
+
+    public void setLoggedIn(int loggedIn) {
+        this.loggedIn = loggedIn;
+    }
+
+    private int loggedIn;
+
+    public String getEmailId() {
+        return emailId;
+    }
+
+    public void setEmailId(String emailId) {
+        this.emailId = emailId;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    // Will be used by the ArrayAdapter in the ListView
+    @Override
+    public String toString() {
+        return password;
+    }
+}
\ No newline at end of file
Index: res/layout/fragment_quick_contact.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/fragment_quick_contact.xml	(revision )
+++ res/layout/fragment_quick_contact.xml	(revision )
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content" >
+
+    <ImageView
+        android:id="@+id/image"
+        android:layout_width="match_parent"
+        android:layout_height="170dip"
+        android:scaleType="centerCrop"
+        android:src="@drawable/contact" />
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignBottom="@+id/image"
+        android:background="#77000000"
+        android:paddingBottom="14dip"
+        android:paddingLeft="8dip"
+        android:paddingTop="14dip"
+        android:text="Quick Contact"
+        android:textColor="#FFFFFFFF"
+        android:textSize="18sp" />
+
+    <com.astuetz.PagerSlidingTabStrip 
+        android:id="@+id/tabs"
+        android:layout_width="match_parent"
+        android:layout_height="62dip"
+        android:layout_below="@+id/image"
+        android:background="@drawable/background_tabs_diagonal"
+        app:pstsDividerColor="#00000000"
+		app:pstsIndicatorColor="#FF33B5E6"
+		app:pstsTabPaddingLeftRight="14dip"
+		app:pstsUnderlineColor="#FF33B5E6"
+        />
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/pager"
+        android:layout_width="match_parent"
+        android:layout_height="96dip"
+        android:layout_below="@+id/tabs" />
+
+</RelativeLayout>
\ No newline at end of file
Index: res/layout/activity_dropbox.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/activity_dropbox.xml	(revision )
+++ res/layout/activity_dropbox.xml	(revision )
@@ -0,0 +1,54 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:orientation="vertical"
+    tools:context="com.dropbox.android.sample.DropboxActivity">
+
+    <Button
+        android:id="@+id/dropbox_login"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:text="Login to Dropbox"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:textColor="#fff"
+        android:background="#80deea"
+        android:textStyle="bold" />
+    <Button
+        android:id="@+id/upload_file"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:background="#80deea"
+        android:text="Upload File to Dropbox"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:textColor="#fff"
+        android:textStyle="bold" />
+    <Button
+        android:id="@+id/list_files"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:background="#80deea"
+        android:text="List All Files"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:textColor="#fff"
+        android:textStyle="bold" />
+
+    <ScrollView
+        android:layout_width="fill_parent"
+        android:layout_height="match_parent"
+        android:layout_margin="10dp">
+
+        <LinearLayout
+            android:id="@+id/container_files"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical" >
+        </LinearLayout>
+    </ScrollView>
+
+</LinearLayout>
Index: src/com/se1/DropBox/UploadFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/UploadFile.java	(revision )
+++ src/com/se1/DropBox/UploadFile.java	(revision )
@@ -0,0 +1,177 @@
+
+
+package com.se1.DropBox;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnClickListener;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.os.AsyncTask;
+import android.widget.Toast;
+
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.DropboxAPI.UploadRequest;
+import com.dropbox.client2.ProgressListener;
+import com.dropbox.client2.exception.DropboxException;
+import com.dropbox.client2.exception.DropboxFileSizeException;
+import com.dropbox.client2.exception.DropboxIOException;
+import com.dropbox.client2.exception.DropboxParseException;
+import com.dropbox.client2.exception.DropboxPartialFileException;
+import com.dropbox.client2.exception.DropboxServerException;
+import com.dropbox.client2.exception.DropboxUnlinkedException;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+
+/**
+ * Here we show uploading a file in a background thread, trying to show typical
+ * exception handling and flow of control for an app that uploads a file from
+ * Dropbox.
+ */
+public class UploadFile extends AsyncTask<Void, Long, Boolean> {
+
+	private DropboxAPI<?> mApi;
+	private String mPath;
+	private File mFile;
+
+	private long mFileLen;
+	private UploadRequest mRequest;
+	private Context mContext;
+	private ProgressDialog mDialog;
+	final static private String ACCOUNT_PREFS_NAME = "prefs";
+
+	private String mErrorMsg;
+
+
+	public UploadFile(Context context, DropboxAPI<?> api, String dropboxPath,
+            File file) {
+        mContext = context;
+
+        mFileLen = file.length();
+        mApi = api;
+        mPath = dropboxPath;
+        mFile = file;
+
+        mDialog = new ProgressDialog(context);
+        mDialog.setMax(100);
+        mDialog.setMessage("Uploading " + file.getName());
+        mDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        mDialog.setProgress(0);
+        mDialog.setButton("Cancel", new OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+                // This will cancel the putFile operation
+                mRequest.abort();
+            }
+        });
+        mDialog.show();
+    }
+
+
+	@Override
+	protected Boolean doInBackground(Void... params) {
+		try {
+			// By creating a request, we get a handle to the putFile operation,
+			// so we can cancel it later if we want to
+			FileInputStream fis = new FileInputStream(mFile);
+			String path = mPath + mFile.getName();
+			mRequest = mApi.putFileOverwriteRequest(path, fis, mFile.length(),
+					new ProgressListener() {
+						@Override
+						public long progressInterval() {
+							// Update the progress bar every half-second or so
+							return 500;
+						}
+
+						@Override
+						public void onProgress(long bytes, long total) {
+							publishProgress(bytes);
+						}
+					});
+
+			if (mRequest != null) {
+				mRequest.upload();
+				return true;
+			}
+
+		} catch (DropboxUnlinkedException e) {
+			// This session wasn't authenticated properly or user unlinked
+			mErrorMsg = "This app wasn't authenticated properly.";
+		} catch (DropboxFileSizeException e) {
+			// File size too big to upload via the API
+			mErrorMsg = "This file is too big to upload";
+		} catch (DropboxPartialFileException e) {
+			// We canceled the operation
+			mErrorMsg = "Upload canceled";
+		} catch (DropboxServerException e) {
+			// Server-side exception. These are examples of what could happen,
+			// but we don't do anything special with them here.
+			if (e.error == DropboxServerException._401_UNAUTHORIZED) {
+				// Unauthorized, so we should unlink them. You may want to
+				// automatically log the user out in this case.
+			} else if (e.error == DropboxServerException._403_FORBIDDEN) {
+				// Not allowed to access this
+			} else if (e.error == DropboxServerException._404_NOT_FOUND) {
+				// path not found (or if it was the thumbnail, can't be
+				// thumbnailed)
+			} else if (e.error == DropboxServerException._507_INSUFFICIENT_STORAGE) {
+				// user is over quota
+			} else {
+				// Something else
+			}
+			// This gets the Dropbox error, translated into the user's language
+			mErrorMsg = e.body.userError;
+			if (mErrorMsg == null) {
+				mErrorMsg = e.body.error;
+			}
+		} catch (DropboxIOException e) {
+			e.printStackTrace();
+			// Happens all the time, probably want to retry automatically.
+			mErrorMsg = "Network error.  Try again.";
+		} catch (DropboxParseException e) {
+			// Probably due to Dropbox server restarting, should retry
+			mErrorMsg = "Dropbox error.  Try again.";
+		} catch (DropboxException e) {
+			// Unknown error
+			mErrorMsg = "Unknown error.  Try again.";
+		} catch (FileNotFoundException e) {
+		}
+		return false;
+	}
+
+	@Override
+	protected void onProgressUpdate(Long... progress) {
+		int percent = (int) (100.0 * (double) progress[0] / mFileLen + 0.5);
+		mDialog.setProgress(percent);
+	}
+
+	@Override
+	protected void onPostExecute(Boolean result) {
+		mDialog.dismiss();
+		if (result) {
+			showToast("Successfully uploaded");
+//			mApi.getSession().unlink();
+//
+//			// Clear our stored keys
+//			clearKeys();
+		} else {
+			showToast(mErrorMsg);
+		}
+	}
+
+	private void showToast(String msg) {
+		Toast error = Toast.makeText(mContext, msg, Toast.LENGTH_LONG);
+		error.show();
+	}
+	private void clearKeys() {
+		SharedPreferences prefs = mContext.getSharedPreferences(ACCOUNT_PREFS_NAME, 0);
+		Editor edit = prefs.edit();
+		edit.clear();
+		edit.commit();
+	}
+
+	
+
+}
Index: res/layout/fragment_parent.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/fragment_parent.xml	(revision )
+++ res/layout/fragment_parent.xml	(revision )
@@ -0,0 +1,105 @@
+<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/drawer_layout"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+
+    <RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" >
+
+        <com.astuetz.PagerSlidingTabStrip
+            android:id="@+id/tabs"
+            android:layout_width="match_parent"
+            android:layout_height="48dip"
+            android:background="@drawable/background_tabs" />
+
+        <android.support.v4.view.ViewPager
+            android:id="@+id/pager"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_above="@+id/colors"
+            android:layout_below="@+id/tabs"
+            tools:context=".MainActivity" />
+
+        <LinearLayout
+            android:id="@+id/colors"
+            android:layout_width="match_parent"
+            android:layout_height="48dip"
+            android:layout_alignParentBottom="true"
+            android:layout_marginBottom="8dip"
+            android:layout_marginLeft="4dip"
+            android:layout_marginRight="4dip"
+            android:orientation="horizontal" >
+
+            <ImageView
+                android:layout_width="0dip"
+                android:layout_height="match_parent"
+                android:layout_margin="4dip"
+                android:layout_weight="1"
+                android:background="#FF666666"
+                android:onClick="onColorClicked"
+                android:tag="#FF666666" />
+
+            <ImageView
+                android:layout_width="0dip"
+                android:layout_height="match_parent"
+                android:layout_margin="4dip"
+                android:layout_weight="1"
+                android:background="#FF96AA39"
+                android:onClick="onColorClicked"
+                android:tag="#FF96AA39" />
+
+            <ImageView
+                android:layout_width="0dip"
+                android:layout_height="match_parent"
+                android:layout_margin="4dip"
+                android:layout_weight="1"
+                android:background="#FFC74B46"
+                android:onClick="onColorClicked"
+                android:tag="#FFC74B46" />
+
+            <ImageView
+                android:layout_width="0dip"
+                android:layout_height="match_parent"
+                android:layout_margin="4dip"
+                android:layout_weight="1"
+                android:background="#FFF4842D"
+                android:onClick="onColorClicked"
+                android:tag="#FFF4842D" />
+
+            <ImageView
+                android:layout_width="0dip"
+                android:layout_height="match_parent"
+                android:layout_margin="4dip"
+                android:layout_weight="1"
+                android:background="#FF3F9FE0"
+                android:onClick="onColorClicked"
+                android:tag="#FF3F9FE0" />
+
+            <ImageView
+                android:layout_width="0dip"
+                android:layout_height="match_parent"
+                android:layout_margin="4dip"
+                android:layout_weight="1"
+                android:background="#FF5161BC"
+                android:onClick="onColorClicked"
+                android:tag="#FF5161BC" />
+        </LinearLayout>
+    </RelativeLayout>
+
+    <!-- The navigation drawer -->
+
+    <ListView
+        android:id="@+id/left_drawer"
+        android:layout_width="130dp"
+        android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:background="#fff"
+        android:choiceMode="singleChoice"
+        android:divider="#444"
+        android:dividerHeight="1dp" />
+
+</android.support.v4.widget.DrawerLayout>
\ No newline at end of file
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradlew.bat	(revision )
+++ gradlew.bat	(revision )
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: res/layout/splashscreen.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/splashscreen.xml	(revision )
+++ res/layout/splashscreen.xml	(revision )
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="fill_parent"
+    android:layout_height="fill_parent">
+
+    <ImageView android:id="@+id/splashscreen" android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
+        android:src="@drawable/ic_launcher"
+        android:layout_gravity="center"/>
+
+    <TextView android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Hello World, splash"/>
+
+</LinearLayout>
\ No newline at end of file
Index: src/com/se1/DropBox/DownloadRandomPicture.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/DownloadRandomPicture.java	(revision )
+++ src/com/se1/DropBox/DownloadRandomPicture.java	(revision )
@@ -0,0 +1,187 @@
+package com.se1.DropBox;
+
+import android.app.ProgressDialog;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnClickListener;
+import android.content.Intent;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.Toast;
+
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.DropboxAPI.Entry;
+import com.dropbox.client2.DropboxAPI.ThumbFormat;
+import com.dropbox.client2.DropboxAPI.ThumbSize;
+import com.dropbox.client2.exception.DropboxException;
+import com.dropbox.client2.exception.DropboxIOException;
+import com.dropbox.client2.exception.DropboxParseException;
+import com.dropbox.client2.exception.DropboxPartialFileException;
+import com.dropbox.client2.exception.DropboxServerException;
+import com.dropbox.client2.exception.DropboxUnlinkedException;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+
+public class DownloadRandomPicture extends AsyncTask<Void, Long, Boolean> {
+
+
+    private Context mContext;
+    private final ProgressDialog mDialog;
+    private DropboxAPI<?> mApi;
+    private String mPath;
+    private ImageView mView;
+    private Drawable mDrawable;
+
+    private FileOutputStream mFos;
+    private Entry fileSelected;
+
+    private boolean mCanceled;
+    private Long mFileLen;
+    private String mErrorMsg;
+
+    // Note that, since we use a single file name here for simplicity, you
+    // won't be able to use this code for two simultaneous downloads.
+    private final static String IMAGE_FILE_NAME = "dbroulette.png";
+
+    public DownloadRandomPicture(Context context, DropboxAPI<?> api,
+                                 Entry file, ImageView view) {
+        // We set the context this way so we don't accidentally leak activities
+        mContext = context.getApplicationContext();
+
+        mApi = api;
+        mView = view;
+        fileSelected=file;
+        mPath = fileSelected.path;
+        mDialog = new ProgressDialog(context);
+        mDialog.setMessage("Downloading Image");
+        mDialog.setButton(ProgressDialog.BUTTON_POSITIVE, "Cancel", new OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+                mCanceled = true;
+                mErrorMsg = "Canceled";
+
+                // This will cancel the getThumbnail operation by closing
+                // its stream
+                if (mFos != null) {
+                    try {
+                        mFos.close();
+                    } catch (IOException e) {
+                    }
+                }
+            }
+        });
+
+        mDialog.show();
+    }
+    /*imp function need to understand this function it is showing image view and thumbnail*/
+    @Override
+    protected Boolean doInBackground(Void... params) {
+        try {
+            if (mCanceled) {
+                return false;
+            }
+
+            String path = fileSelected.path;
+            mFileLen = fileSelected.bytes;
+
+
+            String cachePath = mContext.getCacheDir().getAbsolutePath() + "/" + IMAGE_FILE_NAME;
+            Log.d("path is", "cachePath" + cachePath);
+            try {
+
+                mFos = new FileOutputStream(cachePath);
+
+            } catch (FileNotFoundException e) {
+                mErrorMsg = "Couldn't create a local file to store the image";
+                return false;
+            }
+
+            // This downloads a smaller, thumbnail version of the file.  The
+            // API to download the actual file is roughly the same.
+            mApi.getThumbnail(path, mFos, ThumbSize.BESTFIT_960x640,
+                    ThumbFormat.JPEG, null);
+            if (mCanceled) {
+                return false;
+            }
+
+            mDrawable = Drawable.createFromPath(cachePath);
+            // We must have a legitimate picture
+            return true;
+
+        } catch (DropboxUnlinkedException e) {
+            // The AuthSession wasn't properly authenticated or user unlinked.
+        } catch (DropboxPartialFileException e) {
+            // We canceled the operation
+            mErrorMsg = "Download canceled";
+        } catch (DropboxServerException e) {
+            // Server-side exception.  These are examples of what could happen,
+            // but we don't do anything special with them here.
+            if (e.error == DropboxServerException._304_NOT_MODIFIED) {
+                // won't happen since we don't pass in revision with metadata
+            } else if (e.error == DropboxServerException._401_UNAUTHORIZED) {
+                // Unauthorized, so we should unlink them.  You may want to
+                // automatically log the user out in this case.
+            } else if (e.error == DropboxServerException._403_FORBIDDEN) {
+                // Not allowed to access this
+            } else if (e.error == DropboxServerException._404_NOT_FOUND) {
+                // path not found (or if it was the thumbnail, can't be
+                // thumbnailed)
+            } else if (e.error == DropboxServerException._406_NOT_ACCEPTABLE) {
+                // too many entries to return
+            } else if (e.error == DropboxServerException._415_UNSUPPORTED_MEDIA) {
+                // can't be thumbnailed
+            } else if (e.error == DropboxServerException._507_INSUFFICIENT_STORAGE) {
+                // user is over quota
+            } else {
+                // Something else
+            }
+            // This gets the Dropbox error, translated into the user's language
+            mErrorMsg = e.body.userError;
+            if (mErrorMsg == null) {
+                mErrorMsg = e.body.error;
+            }
+        } catch (DropboxIOException e) {
+            // Happens all the time, probably want to retry automatically.
+            mErrorMsg = "Network error.  Try again.";
+        } catch (DropboxParseException e) {
+            // Probably due to Dropbox server restarting, should retry
+            mErrorMsg = "Dropbox error.  Try again.";
+        } catch (DropboxException e) {
+            // Unknown error
+            mErrorMsg = "Unknown error.  Try again.";
+        }
+        return false;
+    }
+
+    @Override
+    protected void onProgressUpdate(Long... progress) {
+        int percent = (int)(100.0*(double)progress[0]/mFileLen + 0.5);
+        mDialog.setProgress(percent);
+    }
+
+    @Override
+    protected void onPostExecute(Boolean result) {
+        mDialog.dismiss();
+        if (result) {
+            // Set the image now that we have it
+            mView.setImageDrawable(mDrawable);
+        } else {
+            // Couldn't download it, so show an error
+            showToast(mErrorMsg);
+        }
+    }
+
+    private void showToast(String msg) {
+        Toast error = Toast.makeText(mContext, msg, Toast.LENGTH_LONG);
+        error.show();
+    }
+
+
+}
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision )
+++ README.md	(revision )
@@ -0,0 +1,34 @@
+# Android Navigation Drawer with Page (Pager) Sliding tab Strip
+
+This sample is the result of integration of latest navigation drawer(v4 lib) and similar tab strip which is used in google play music app. (https://play.google.com/store/apps/details?id=com.google.android.music)
+
+Please check out apk which is in root folder of the project , below is the Screenshot
+
+
+<a href="http://i.imgur.com/TRzIca6.png" alt="Screenshot">
+  <img src="http://i.imgur.com/TRzIca6.png">
+</a>
+
+
+## Acknowledgements
+
+This sample uses many great open-source libraries from the Android dev community:
+
+* [ActionBarSherlock (Tag 4.2.0)](https://github.com/JakeWharton/ActionBarSherlock)
+* [nested-fragments](https://github.com/marsucsb/nested-fragments)
+* [PagerSlidingTabStrip (Tag 1.0.1) ](https://github.com/astuetz/PagerSlidingTabStrip/releases/tag/v1.0.1)
+* [NavigationDrawer](http://developer.android.com/training/implementing-navigation/nav-drawer.html)
+* Latest Support v4 library
+
+#Steps to compile the project in eclipse
+
+* Download PagerSlidingTabStrip - Tag 1.0.1
+* Import to eclipse
+* Add latest android-support-v4.jar
+* Download ActionBarSherlock - Tag 4.2.0
+* Import to eclipse
+* Add/replace android-support-v4.jar if there are any jar issues
+* Add the above libraries to main project
+* Clean and compile
+
+I hope this helps you in building your next android app.
Index: res/drawable/background_tabs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/drawable/background_tabs.xml	(revision )
+++ res/drawable/background_tabs.xml	(revision )
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
+    android:src="@drawable/tabs_pattern"
+    android:tileMode="repeat" />
\ No newline at end of file
Index: res/drawable/background_tabs_diagonal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/drawable/background_tabs_diagonal.xml	(revision )
+++ res/drawable/background_tabs_diagonal.xml	(revision )
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
+    android:src="@drawable/tabs_pattern_diagonal"
+    android:tileMode="repeat" />
\ No newline at end of file
Index: res/values-v11/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/values-v11/styles.xml	(revision )
+++ res/values-v11/styles.xml	(revision )
@@ -0,0 +1,5 @@
+<resources>
+
+    <style name="AppBaseTheme" parent="android:Theme.Holo.Light"></style>
+
+</resources>
\ No newline at end of file
Index: src/com/se1/DropBox/DownloadPdf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/DownloadPdf.java	(revision )
+++ src/com/se1/DropBox/DownloadPdf.java	(revision )
@@ -0,0 +1,165 @@
+package com.se1.DropBox;
+
+import android.app.ProgressDialog;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnClickListener;
+import android.content.Intent;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.Toast;
+
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.DropboxAPI.Entry;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+
+public class DownloadPdf extends AsyncTask<Void, Long, Boolean> {
+
+
+    private Context mContext;
+    private final ProgressDialog mDialog;
+    private DropboxAPI<?> mApi;
+    private String mPath;
+    private ImageView mView;
+    private Drawable mDrawable;
+
+    private FileOutputStream mFos;
+    private Entry fileSelected;
+
+    private boolean mCanceled;
+    private Long mFileLen;
+    private String mErrorMsg;
+
+    // Note that, since we use a single file name here for simplicity, you
+    // won't be able to use this code for two simultaneous downloads.
+    private final static String PDF_FILE_NAME = "temp.pdf";
+
+    public DownloadPdf(Context context, DropboxAPI<?> api,
+                       Entry file) {
+        // We set the context this way so we don't accidentally leak activities
+        mContext = context.getApplicationContext();
+
+        mApi = api;
+        fileSelected=file;
+        mPath = fileSelected.path;
+        mDialog = new ProgressDialog(context);
+        mDialog.setMessage("Downloading pdf");
+        mDialog.setButton(ProgressDialog.BUTTON_POSITIVE, "Cancel", new OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+                mCanceled = true;
+                mErrorMsg = "Canceled";
+
+                // This will cancel the getThumbnail operation by closing
+                // its stream
+                if (mFos != null) {
+                    try {
+                        mFos.close();
+                    } catch (IOException e) {
+                    }
+                }
+            }
+        });
+
+        mDialog.show();
+    }
+    /*imp function need to understand this function it is showing image view and thumbnail*/
+    @Override
+    protected Boolean doInBackground(Void... params) {
+        try {
+            if (mCanceled) {
+                return false;
+            }
+
+            String path = fileSelected.path;
+            mFileLen = fileSelected.bytes;
+
+            Log.d("inside pdf","inside pdf");
+            Log.d("path is", "path" + path);
+            String cachePath = mContext.getCacheDir().getAbsolutePath() + "/" + PDF_FILE_NAME;
+            Log.d("path is", "cachePath" + cachePath);
+            try {
+
+                mFos = new FileOutputStream(cachePath);
+
+            } catch (FileNotFoundException e) {
+                mErrorMsg = "Couldn't create a local file to store the image";
+                return false;
+            }
+
+            // This downloads a smaller, thumbnail version of the file.  The
+            // API to download the actual file is roughly the same.
+            //mApi.getThumbnail(path, mFos, ThumbSize.BESTFIT_960x640,
+              //      ThumbFormat.JPEG, null);
+            //code to open pdf
+            Log.d("1","here");
+            mApi.getFile(path, null, mFos, null);
+            Log.d("2","here");
+            if (mCanceled) {
+                return false;
+            }
+            Log.d("here","here");
+            File file = new File(cachePath);
+
+            if (file.exists()) {
+                Uri localpath = Uri.fromFile(file);
+                Intent intent = new Intent(Intent.ACTION_VIEW);
+                intent.setDataAndType(localpath, "application/pdf");
+                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+
+                try {
+                    mContext.startActivity(intent);
+                }
+                catch (ActivityNotFoundException e) {
+                   Log.d("Error","No Application Available to View PDF");
+                }
+            }
+
+            if (mCanceled) {
+                return false;
+            }
+
+
+            // We must have a legitimate picture
+            return true;
+
+        } catch (Exception e) {
+            // Unknown error
+            mErrorMsg = "Unknown error.  Try again.";
+        }
+        return false;
+    }
+
+    @Override
+    protected void onProgressUpdate(Long... progress) {
+        int percent = (int)(100.0*(double)progress[0]/mFileLen + 0.5);
+        mDialog.setProgress(percent);
+    }
+
+    @Override
+    protected void onPostExecute(Boolean result) {
+        mDialog.dismiss();
+        if (result) {
+            // Set the image now that we have it
+            mView.setImageDrawable(mDrawable);
+        } else {
+            // Couldn't download it, so show an error
+            showToast(mErrorMsg);
+        }
+    }
+
+    private void showToast(String msg) {
+        Toast error = Toast.makeText(mContext, msg, Toast.LENGTH_LONG);
+        error.show();
+    }
+
+
+}
Index: res/layout/activity_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/activity_home.xml	(revision )
+++ res/layout/activity_home.xml	(revision )
@@ -0,0 +1,51 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:context="com.se1.Activity.SettingsActivity">
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+
+        <TextView android:text="@string/Welcome" android:layout_width="wrap_content"
+            android:layout_height="fill_parent"
+            android:textSize="20dp"
+            android:id="@+id/textView" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+
+        <Button
+            style="?android:attr/buttonStyleSmall"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Reset Password"
+            android:id="@+id/resetpassword"
+            android:onClick="goToResetPassword"
+            android:layout_alignParentTop="true"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentStart="true"
+            android:layout_marginTop="45dp"
+            android:background="#80deea"/>
+
+
+
+        <Button
+            style="?android:attr/buttonStyleSmall"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Logout"
+            android:id="@+id/Logout"
+            android:background="#80deea"
+            android:layout_marginTop="10dp"/>
+
+    </LinearLayout>
+
+</RelativeLayout>
Index: src/com/se1/Activity/splash.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/Activity/splash.java	(revision )
+++ src/com/se1/Activity/splash.java	(revision )
@@ -0,0 +1,31 @@
+package com.se1.Activity;
+
+
+import android.os.Bundle;
+import android.view.Menu;
+import android.view.MenuItem;
+
+import com.se1.main.MainActivity;
+import com.se1.main.R;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.app.Activity;
+
+
+
+    public class splash extends Activity {
+        @Override
+        public void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+            setContentView(R.layout.splashscreen);
+
+            int secondsDelayed = 1;
+            new Handler().postDelayed(new Runnable() {
+                public void run() {
+                    startActivity(new Intent(splash.this, MainActivity.class));
+                    finish();
+                }
+            }, secondsDelayed * 10000);
+        }
+    }
\ No newline at end of file
Index: AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- AndroidManifest.xml	(revision )
+++ AndroidManifest.xml	(revision )
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.se1.main"
+    android:versionCode="3"
+    android:versionName="1.02" >
+
+    <uses-sdk
+        android:minSdkVersion="8"
+        android:targetSdkVersion="17" />
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.CAMERA" />
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/Theme.Sherlock" >
+        <activity
+            android:name="com.se1.main.MainActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.se1.Activity.RegisterUserActivity"
+            android:label="@string/title_activity_register_user"
+            android:parentActivityName="com.se1.main.MainActivity" >
+            <meta-data
+                android:name="android.support.PARENT_ACTIVITY"
+                android:value="com.se1.main.MainActivity" />
+        </activity>
+        <activity
+            android:name="com.se1.Activity.SettingsActivity"
+            android:label="@string/title_activity_settings">
+        </activity>
+        <activity android:name="com.se1.DropBox.DropboxDownload" >
+        </activity>
+        <activity
+            android:name="com.se1.navdrawer.NavigationMainActivity"
+           >
+        </activity>
+        <activity
+            android:name="com.se1.Activity.ResetPasswordActivity"
+            android:label="@string/title_activity_reset_password"
+            >
+        </activity>
+        <activity
+            android:name="com.se1.DropBox.DropBoxLogin"
+            android:label="@string/title_activity_dropbox_login"
+            >
+
+        </activity>
+        <activity
+            android:name="com.dropbox.client2.android.AuthActivity"
+            android:configChanges="orientation|keyboard"
+            android:launchMode="singleTask" >
+            <intent-filter>
+
+                <!-- Change this to be db- followed by your app key -->
+                <data android:scheme="db-oujw7a401lgnthn" />
+
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.BROWSABLE" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.se1.Activity.splash"
+            >
+
+        </activity>
+
+    </application>
+
+
+</manifest>
\ No newline at end of file
Index: res/layout/activity_splash.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/activity_splash.xml	(revision )
+++ res/layout/activity_splash.xml	(revision )
@@ -0,0 +1,11 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin" tools:context="com.se1.Activity.splash">
+
+    <TextView android:text="@string/hello_world" android:layout_width="wrap_content"
+        android:layout_height="wrap_content" />
+
+</RelativeLayout>
Index: res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/values/dimens.xml	(revision )
+++ res/values/dimens.xml	(revision )
@@ -0,0 +1,7 @@
+<resources>
+
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+
+</resources>
\ No newline at end of file
Index: src/com/se1/main/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/main/MainActivity.java	(revision )
+++ src/com/se1/main/MainActivity.java	(revision )
@@ -0,0 +1,212 @@
+package com.se1.main;
+
+import android.content.Intent;
+
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+import com.se1.dao.DatabaseOperation;
+import com.se1.dao.Mail;
+import com.se1.dao.User;
+
+import java.util.Random;
+
+
+public class MainActivity extends SherlockFragmentActivity {
+    private DatabaseOperation datasource;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        final Button loginButton = (Button)findViewById(R.id.login);
+        final Button signUp = (Button)findViewById(R.id.signUp);
+        final EditText password   = (EditText)findViewById(R.id.password);
+        final EditText email   = (EditText)findViewById(R.id.email);
+        final CheckBox loggedIn=(CheckBox)findViewById(R.id.loggedIn);
+        datasource = new DatabaseOperation(this);
+        datasource.open();
+        Intent myIntent = getIntent();
+        String logout = myIntent.getStringExtra("Logout");
+        User user=datasource.getUserDetail();
+        if(user!=null && ((user.getEmailId()!= null || user.getEmailId().equalsIgnoreCase("")) && user.getLoggedIn() == 1 ))//logged button checked
+        {
+            //Toast.makeText(getApplicationContext(), "already checked loggedIn"+user.getLoggedIn(),
+              //
+              //    Toast.LENGTH_LONG).show();
+            if(logout == null)
+                goToHomePage();
+            else if(logout != null && !logout.equalsIgnoreCase("Yes"))
+                goToHomePage();
+
+        }
+        if(user!=null && ((user.getEmailId()!= null)))
+        {
+           signUp.setVisibility(View.GONE);
+        }
+        //Start: Check email Id is valid or not
+        email.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (!hasFocus) {
+                    Is_Valid_Email(email); // pass your EditText Obj here.
+                }
+            }
+            public void Is_Valid_Email(EditText editText) {
+                String valid_email = null;
+                if (editText.getText().toString() == null) {
+                    editText.setError("Invalid Email Address");
+                    valid_email = null;
+                } else if (isEmailValid(editText.getText().toString()) == false) {
+                    editText.setError("Invalid Email Address");
+                    valid_email = null;
+                } else {
+                    valid_email = editText.getText().toString();
+                }
+            }
+            boolean isEmailValid(CharSequence email) {
+                return android.util.Patterns.EMAIL_ADDRESS.matcher(email)
+                        .matches();
+            }
+        });
+        //End Check email Id is valid or not
+        loginButton.setOnClickListener(
+                new View.OnClickListener()
+                {
+                    public void onClick(View view) {
+                        if(!Is_Valid_Email(email))
+                        {
+
+                            Toast.makeText(getApplicationContext(), "Please Enter valid Email Id",
+                                    Toast.LENGTH_LONG).show();
+                        }
+                        else
+                        {
+                            User user = datasource.getUserDetail();
+
+                            if (user != null && user.getEmailId().equalsIgnoreCase(email.getText().toString()))
+                            {
+                                if(user.getPassword().equals(password.getText().toString()))
+                                {
+                                    int loggedInValue = (loggedIn.isChecked()) ? 1 : 0;
+                                    Log.d("loggedIn", "" + loggedInValue);
+                                    if (loggedInValue == 1) {
+                                        datasource.addSignIn(user.getEmailId());
+                                    }
+                                    goToHomePage();
+                                }
+                                else
+                                {
+                                    Toast.makeText(getApplicationContext(),"Please Enter Valid Password",
+                                                   Toast.LENGTH_LONG).show();
+                                }
+                                //Toast.makeText(getApplicationContext(),""+user.getLoggedIn(),
+                                 //       Toast.LENGTH_LONG).show();
+                                //Toast.makeText(getApplicationContext(), user.getEmailId().toString(),
+                                  //     Toast.LENGTH_LONG).show();
+                            }
+                            else
+                                Toast.makeText(getApplicationContext(), "Please Register to Application",
+                                        Toast.LENGTH_LONG).show();
+                            }
+                        }
+
+                    public boolean Is_Valid_Email(EditText editText) {
+                        String valid_email = null;
+                        if (editText.getText().toString() == null) {
+                            valid_email = null;
+                            return false;
+                        } else if (isEmailValid(editText.getText().toString()) == false) {
+                            valid_email = null;
+                            return false;
+                        } else {
+                            valid_email = editText.getText().toString();
+                            return true;
+                        }
+                    }
+                    boolean isEmailValid(CharSequence email) {
+                        return android.util.Patterns.EMAIL_ADDRESS.matcher(email)
+                                .matches();
+                    }
+                });
+
+        Button forgotPassword = (Button) findViewById(R.id.forgotPassword);
+        forgotPassword.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View view) {
+
+                Runnable r = new Runnable() {
+
+                    @Override
+                    public void run() {
+                        // send email
+                        Log.d("here","here");
+                        Mail mail = new Mail("cloud360user@gmail.com", "cloudsync@");
+                        final User user = datasource.getUserDetail();
+                        if (user != null && user.getEmailId() != "") {
+                            Random r = new Random();
+                            int randomNo = r.nextInt(99999 - 999) + 999;
+                            String[] toArr = {user.getEmailId(), user.getEmailId()};
+
+                            mail.set_to(toArr);
+                            mail.set_from("cloud360user@gmail.com");
+                            mail.set_subject("This is an email sent using my Mail JavaMail wrapper from an Android device.");
+                            mail.setBody("Your New Password is"+randomNo);
+                            try {
+                                if (mail.send()) {
+                                   runOnUiThread(new Runnable()
+                                    {
+                                        public void run()
+                                        {
+                                            Toast.makeText(getApplicationContext(), "New Password sent to "+user.getEmailId(),
+                                                    Toast.LENGTH_LONG).show();
+                                        }
+                                    });
+                                    datasource.forgotPassword(user.getEmailId(),randomNo);
+
+                                } else {
+                                    /*runOnUiThread(new Runnable()
+                                    {
+                                        public void run()
+                                        {
+                                            Toast.makeText(getApplicationContext(), "Email was not sent.",
+                                                    Toast.LENGTH_LONG).show();
+                                        }
+                                    });*/
+
+                                }
+                            } catch (Exception e) {
+                                //Toast.makeText(MailApp.this, "There was a problem sending the email.", Toast.LENGTH_LONG).show();
+                                Log.e("MailApp", "Could not send email", e);
+                            }
+                        }
+                    }
+                };
+                Thread t = new Thread(r);
+                t.start();
+            }
+        });
+
+
+
+
+
+    }
+
+    //Navigate to registration page
+    public void goToRegistration(View view)
+    {
+        Intent intent = new Intent(this, com.se1.Activity.RegisterUserActivity.class);
+        startActivity(intent);
+    }
+    //Navigate to home page
+    public void goToHomePage()
+    {
+        Intent intent = new Intent(MainActivity.this, com.se1.navdrawer.NavigationMainActivity.class);
+        MainActivity.this.startActivity(intent);
+    }
+
+}
Index: src/com/se1/navdrawer/PageSlidingTabStripFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/navdrawer/PageSlidingTabStripFragment.java	(revision )
+++ src/com/se1/navdrawer/PageSlidingTabStripFragment.java	(revision )
@@ -0,0 +1,119 @@
+package com.se1.navdrawer;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentPagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.actionbarsherlock.app.SherlockFragment;
+import com.astuetz.PagerSlidingTabStrip;
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.android.AndroidAuthSession;
+import com.se1.DropBox.DropBoxLogin;
+import com.se1.DropBox.DropboxDownload;
+import com.se1.main.R;
+
+public class PageSlidingTabStripFragment extends Fragment {
+    public static DropboxAPI<AndroidAuthSession> getmApi() {
+        return mApi;
+    }
+
+    public static void setmApi(DropboxAPI<AndroidAuthSession> mApi) {
+        PageSlidingTabStripFragment.mApi = mApi;
+    }
+
+    private static DropboxAPI<AndroidAuthSession> mApi;
+	public static final String TAG = PageSlidingTabStripFragment.class
+			.getSimpleName();
+
+	public static PageSlidingTabStripFragment newInstance() {
+		return new PageSlidingTabStripFragment();
+	}
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+
+        setmApi(NavigationMainActivity.getmApi());
+		setRetainInstance(true);
+	}
+
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		return inflater.inflate(R.layout.pager, container, false);
+	}
+     ViewPager pager=null;
+
+    PagerSlidingTabStrip tabs=null;
+    @Override
+	public void onViewCreated(View view, Bundle savedInstanceState) {
+		super.onViewCreated(view, savedInstanceState);
+
+		tabs = (PagerSlidingTabStrip) view
+				.findViewById(R.id.tabs);
+        pager= (ViewPager) view.findViewById(R.id.pager);
+
+        final ViewPager pager = (ViewPager) view.findViewById(R.id.pager);
+        MyPagerAdapter adapter = new MyPagerAdapter(getChildFragmentManager());
+        pager.setAdapter(adapter);
+        tabs.setViewPager(pager);
+
+
+
+	}
+
+
+
+    public class MyPagerAdapter extends FragmentPagerAdapter implements Runnable {
+        private DropboxAPI<AndroidAuthSession> mApi;
+		public MyPagerAdapter(android.support.v4.app.FragmentManager fm) {
+			super(fm);
+		}
+
+		private final String[] TITLES = { "All Files", "Images",
+				"Documents" };
+
+		@Override
+		public CharSequence getPageTitle(int position) {
+			return TITLES[position];
+		}
+
+		@Override
+		public int getCount() {
+			return TITLES.length;
+		}
+
+		@Override
+		public SherlockFragment getItem(int position) {
+            mApi = PageSlidingTabStripFragment.getmApi();
+                    /*
+                    if(position == 0 && mApi != null)
+                    {
+
+                        DropboxDownload dropboxDownload= new DropboxDownload();
+                        dropboxDownload.setDataFromLogin(getActivity().getApplicationContext(),mApi);
+                        return dropboxDownload;
+
+
+                    }
+                    else */return SuperAwesomeCardFragment.newInstance(position);
+
+
+		}
+
+        @Override
+        public void run() {
+
+        }
+    }
+
+
+}
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradlew	(revision )
+++ gradlew	(revision )
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
Index: res/layout/dropboxdownload.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/dropboxdownload.xml	(revision )
+++ res/layout/dropboxdownload.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <ListView
+        android:id="@+id/lvDropboxDownloadFilesList"
+        android:layout_width="match_parent"
+        android:layout_height="430dp"
+        android:divider="@android:color/darker_gray"
+        android:dividerHeight="1dp" >
+
+    </ListView>
+    <ImageView
+        android:id="@+id/image_view"
+        android:layout_width="fill_parent"
+        android:layout_height="10dp"
+        android:layout_weight="1"
+        />
+
+</LinearLayout>
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision )
+++ gradle/wrapper/gradle-wrapper.properties	(revision )
@@ -0,0 +1,6 @@
+#Wed Apr 10 15:27:10 PDT 2013
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
Index: res/layout/activity_register_user.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/activity_register_user.xml	(revision )
+++ res/layout/activity_register_user.xml	(revision )
@@ -0,0 +1,106 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:context="com.se1.Activity.RegisterUserActivity"
+    android:background="#fff">
+
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/imageView2" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        >
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textPersonName"
+            android:hint="First Name"
+            android:ems="10"
+            android:id="@+id/firstNameId"
+            android:textColor="#000" />
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textPersonName"
+            android:hint="Last Name"
+            android:ems="10"
+            android:id="@+id/lastNameId"
+            android:textColor="#000" />
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textEmailAddress"
+            android:ems="10"
+            android:id="@+id/email"
+            android:layout_alignParentTop="true"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentStart="true"
+            android:hint="EmailId"
+            android:textColor="#000" />
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textPassword"
+            android:ems="10"
+            android:id="@+id/password"
+            android:hint="Password"
+            android:layout_below="@+id/email"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentStart="true"
+            android:textColor="#000" />
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textPassword"
+            android:ems="10"
+            android:hint="Confirm Password"
+            android:id="@+id/confirmPassword"
+            android:textColor="#000" />
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/imageView3" />
+
+        <CheckBox
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Keep me logged in"
+            android:id="@+id/loggedIn"
+            android:layout_above="@+id/password"
+            android:layout_toRightOf="@+id/password"
+            android:layout_toEndOf="@+id/password"
+            android:textColor="#000" />
+
+        <Button
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Register"
+            android:id="@+id/registerUser"
+            android:layout_below="@+id/password"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentStart="true"
+            android:background="#80deea"/>
+
+    </LinearLayout>
+
+</RelativeLayout>
Index: src/com/se1/navdrawer/NavigationMainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/navdrawer/NavigationMainActivity.java	(revision )
+++ src/com/se1/navdrawer/NavigationMainActivity.java	(revision )
@@ -0,0 +1,178 @@
+
+package com.se1.navdrawer;
+
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.support.v4.app.ActionBarDrawerToggle;
+import android.support.v4.view.GravityCompat;
+import android.support.v4.widget.DrawerLayout;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.ListView;
+
+import com.actionbarsherlock.app.SherlockFragment;
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.android.AndroidAuthSession;
+import com.se1.Activity.SettingsActivity;
+import com.se1.DropBox.DropBoxLogin;
+import com.se1.main.R;
+
+public class NavigationMainActivity extends SherlockFragmentActivity {
+	DrawerLayout mDrawerLayout;
+	ListView mDrawerList;
+	ActionBarDrawerToggle mDrawerToggle;
+
+	private CharSequence mDrawerTitle;
+	private CharSequence mTitle;
+	private String[] mPlanetTitles;
+
+    public static DropboxAPI<AndroidAuthSession> getmApi() {
+        return mApi;
+    }
+
+    public static void setmApi(DropboxAPI<AndroidAuthSession> mApi) {
+        NavigationMainActivity.mApi = mApi;
+    }
+
+    private static DropboxAPI<AndroidAuthSession> mApi;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_navbar_main);
+        mTitle = mDrawerTitle = getTitle();
+		mPlanetTitles = getResources().getStringArray(R.array.planets_array);
+		mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
+		mDrawerList = (ListView) findViewById(R.id.left_drawer);
+
+		// set a custom shadow that overlays the main content when the drawer
+		// opens
+		mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,
+				GravityCompat.START);
+		// set up the drawer's list view with items and click listener
+		mDrawerList.setAdapter(new ArrayAdapter<String>(this,
+				R.layout.drawer_list_item, mPlanetTitles));
+		mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
+
+		// enable ActionBar app icon to behave as action to toggle nav drawer
+		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+		getSupportActionBar().setHomeButtonEnabled(true);
+
+		// ActionBarDrawerToggle ties together the the proper interactions
+		// between the sliding drawer and the action bar app icon
+		mDrawerToggle = new ActionBarDrawerToggle(this, /* host Activity */
+		mDrawerLayout, /* DrawerLayout object */
+		R.drawable.ic_drawer, /* nav drawer image to replace 'Up' caret */
+		R.string.drawer_open, /* "open drawer" description for accessibility */
+		R.string.drawer_close /* "close drawer" description for accessibility */
+		) {
+			public void onDrawerClosed(View view) {
+				getSupportActionBar().setTitle(mTitle);
+				invalidateOptionsMenu(); // creates call to
+											// onPrepareOptionsMenu()
+			}
+
+			public void onDrawerOpened(View drawerView) {
+				getSupportActionBar().setTitle(mDrawerTitle);
+				invalidateOptionsMenu(); // creates call to
+											// onPrepareOptionsMenu()
+			}
+		};
+		mDrawerLayout.setDrawerListener(mDrawerToggle);
+
+		if (savedInstanceState == null) {
+			selectItem(0);
+		}
+
+	}
+
+	@Override
+	public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {
+		return super.onCreateOptionsMenu(menu);
+	}
+
+	@Override
+	public boolean onOptionsItemSelected(
+			com.actionbarsherlock.view.MenuItem item) {
+
+		switch (item.getItemId()) {
+
+		case android.R.id.home: {
+			if (mDrawerLayout.isDrawerOpen(mDrawerList)) {
+				mDrawerLayout.closeDrawer(mDrawerList);
+			} else {
+				mDrawerLayout.openDrawer(mDrawerList);
+			}
+			break;
+		}
+
+		}
+
+		return super.onOptionsItemSelected(item);
+	}
+
+	// The click listener for ListView in the navigation drawer
+	private class DrawerItemClickListener implements
+			ListView.OnItemClickListener {
+		@Override
+		public void onItemClick(AdapterView<?> parent, View view, int position,
+				long id) {
+			selectItem(position);
+		}
+	}
+	
+
+	@Override
+	protected void onPostCreate(Bundle savedInstanceState) {
+		super.onPostCreate(savedInstanceState);
+		// Sync the toggle state after onRestoreInstanceState has occurred.
+		mDrawerToggle.syncState();
+	}
+
+	@Override
+	public void onConfigurationChanged(Configuration newConfig) {
+		super.onConfigurationChanged(newConfig);
+		// Pass any configuration change to the drawer toggles
+		mDrawerToggle.onConfigurationChanged(newConfig);
+	}
+
+	private void selectItem(int position) {
+
+		switch (position) {
+            case 0:
+
+            //setmApi(DropBoxLogin.getmApi());
+            //zLog.d("mApi in navigation","mAPi"+DropBoxLogin.getmApi());
+            getSupportFragmentManager()
+					.beginTransaction()
+					.add(R.id.content,
+							PageSlidingTabStripFragment.newInstance(),
+							PageSlidingTabStripFragment.TAG).commit();
+
+			break;
+       case 1:
+           startActivity(new Intent(this,DropBoxLogin.class));
+           break;
+            case 4:
+                startActivity(new Intent(this,SettingsActivity.class));
+                break;
+		default:
+
+			SherlockFragment fragment = new PlanetFragment();
+			Bundle args = new Bundle();
+			args.putInt(PlanetFragment.ARG_PLANET_NUMBER, position);
+			fragment.setArguments(args);
+
+			getSupportFragmentManager().beginTransaction();
+					//.add(R.id.content, fragment).commit();
+			break;
+		}
+
+		mDrawerLayout.closeDrawer(mDrawerList);
+	}
+
+
+
+}
\ No newline at end of file
Index: res/values-v14/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/values-v14/styles.xml	(revision )
+++ res/values-v14/styles.xml	(revision )
@@ -0,0 +1,9 @@
+<resources>
+
+    <style name="AppBaseTheme" parent="android:Theme.Holo.Light.DarkActionBar">
+
+
+
+    </style>
+
+</resources>
\ No newline at end of file
Index: res/menu/main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/menu/main.xml	(revision )
+++ res/menu/main.xml	(revision )
@@ -0,0 +1,9 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <item
+        android:id="@+id/action_contact"
+        android:icon="@drawable/ic_action_user"
+        android:showAsAction="ifRoom"
+        android:title="@string/action_contact"/>
+
+</menu>
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision )
+++ .gitignore	(revision )
@@ -0,0 +1,52 @@
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+*.class
+
+# Android generated files
+bin/
+gen/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Eclipse project files
+.classpath
+.project
+.settings
+.factorypath
+.apt_generated
+
+# Maven related
+target/
+
+# Checkstyle
+.checkstyle
+
+# Android Lint
+lint.xml
+
+# IntelliJ
+.idea
+*.iml
+*.ipr
+*.iws
+classes
+gen-external-apklibs
+out
+
+# Gradle 
+.gradle
+build
+
+# Misc.
+*.DS_Store
+*.jar.properties
+
+# Crashlytics
+com_crashlytics_export_strings.xml
\ No newline at end of file
Index: res/values-sw600dp/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/values-sw600dp/dimens.xml	(revision )
+++ res/values-sw600dp/dimens.xml	(revision )
@@ -0,0 +1,8 @@
+<resources>
+
+    <!--
+         Customize dimensions originally defined in res/values/dimens.xml (such as
+         screen margins) for sw600dp devices (e.g. 7" tablets) here.
+    -->
+
+</resources>
\ No newline at end of file
Index: src/com/se1/DropBox/DropBoxLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/DropBoxLogin.java	(revision )
+++ src/com/se1/DropBox/DropBoxLogin.java	(revision )
@@ -0,0 +1,183 @@
+package com.se1.DropBox;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Parcel;
+import android.provider.MediaStore;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockFragment;
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.android.AndroidAuthSession;
+import com.dropbox.client2.android.AuthActivity;
+import com.dropbox.client2.exception.DropboxException;
+import com.dropbox.client2.session.AccessTokenPair;
+import com.dropbox.client2.session.AppKeyPair;
+import com.dropbox.client2.session.TokenPair;
+import com.se1.dao.DropBoxAuth;
+import com.se1.main.R;
+import com.se1.navdrawer.NavigationMainActivity;
+import com.se1.navdrawer.PageSlidingTabStripFragment;
+import com.se1.navdrawer.PlanetFragment;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.LinkedHashMap;
+
+
+public class DropBoxLogin extends SherlockFragmentActivity implements OnClickListener {
+    private static final int TAKE_PHOTO = 1;
+    private Button dropboxLogin;
+    private final String DIR = "/";
+    private File f;
+    private boolean mLoggedIn, onResume;
+
+    private DropboxAPI<AndroidAuthSession> mApi;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.dropbox_login_main);
+        AndroidAuthSession session = buildSession();
+        mApi = new DropboxAPI<AndroidAuthSession>(session);
+
+        // checkAppKeySetup();
+        setLoggedIn(false);
+        dropboxLogin = (Button) findViewById(R.id.dropbox_login);
+        dropboxLogin.setOnClickListener(this);
+    }
+
+    private AndroidAuthSession buildSession() {
+        AppKeyPair appKeyPair = new AppKeyPair(Constants.DROPBOX_APP_KEY,
+                Constants.DROPBOX_APP_SECRET);
+        AndroidAuthSession session;
+
+        String[] stored = getKeys();
+        if (stored != null) {
+            AccessTokenPair accessToken = new AccessTokenPair(stored[0],
+                    stored[1]);
+            session = new AndroidAuthSession(appKeyPair, Constants.ACCESS_TYPE,
+                    accessToken);
+        } else {
+            session = new AndroidAuthSession(appKeyPair, Constants.ACCESS_TYPE);
+        }
+
+        return session;
+    }
+
+    private String[] getKeys() {
+        SharedPreferences prefs = getSharedPreferences(
+                Constants.ACCOUNT_PREFS_NAME, 0);
+        String key = prefs.getString(Constants.ACCESS_KEY_NAME, null);
+        String secret = prefs.getString(Constants.ACCESS_SECRET_NAME, null);
+        if (key != null && secret != null) {
+            String[] ret = new String[2];
+            ret[0] = key;
+            ret[1] = secret;
+            return ret;
+        } else {
+            return null;
+        }
+    }
+
+    @Override
+    public void onClick(View view) {
+        if (view == dropboxLogin) {
+            startActivity(new Intent(DropBoxLogin.this, DropboxDownload.class));
+        }
+    }
+
+    private void logOut() {
+        mApi.getSession().unlink();
+
+        clearKeys();
+    }
+
+    private void clearKeys() {
+        SharedPreferences prefs = getSharedPreferences(
+                Constants.ACCOUNT_PREFS_NAME, 0);
+        Editor edit = prefs.edit();
+        edit.clear();
+        edit.commit();
+    }
+
+    private void createDir() {
+        File dir = new File(Utils.getPath());
+        if (!dir.exists()) {
+            dir.mkdirs();
+        }
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (resultCode == RESULT_OK) {
+            if (requestCode == TAKE_PHOTO) {
+//				f = new File(Utils.getPath() + "/temp.jpg");
+                if (Utils.isOnline(DropBoxLogin.this)) {
+                    mApi.getSession().startAuthentication(DropBoxLogin.this);
+                    onResume = true;
+                } else {
+                    Utils.showNetworkAlert(DropBoxLogin.this);
+                }
+            }
+        }
+    }
+
+    public void setLoggedIn(boolean loggedIn) {
+        mLoggedIn = loggedIn;
+        if (loggedIn) {
+            //instead of f send file from sd card
+            UploadFile upload = new UploadFile(DropBoxLogin.this, mApi, DIR, f);
+            upload.execute();
+            onResume = false;
+
+        }
+    }
+
+    private void storeKeys(String key, String secret) {
+        SharedPreferences prefs = getSharedPreferences(
+                Constants.ACCOUNT_PREFS_NAME, 0);
+        Editor edit = prefs.edit();
+        edit.putString(Constants.ACCESS_KEY_NAME, key);
+        edit.putString(Constants.ACCESS_SECRET_NAME, secret);
+        edit.commit();
+    }
+
+    private void showToast(String msg) {
+        Toast error = Toast.makeText(this, msg, Toast.LENGTH_LONG);
+        error.show();
+    }
+
+    @Override
+    protected void onResume() {
+
+        AndroidAuthSession session = mApi.getSession();
+
+        if (session.authenticationSuccessful()) {
+            try {
+                session.finishAuthentication();
+
+                TokenPair tokens = session.getAccessTokenPair();
+                storeKeys(tokens.key, tokens.secret);
+                setLoggedIn(onResume);
+            } catch (IllegalStateException e) {
+                showToast("Couldn't authenticate with Dropbox:"
+                        + e.getLocalizedMessage());
+            }
+        }
+        super.onResume();
+    }
+}
\ No newline at end of file
Index: src/com/se1/Activity/RegisterUserActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/Activity/RegisterUserActivity.java	(revision )
+++ src/com/se1/Activity/RegisterUserActivity.java	(revision )
@@ -0,0 +1,85 @@
+package com.se1.Activity;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+import com.se1.dao.DatabaseOperation;
+import com.se1.dao.User;
+import com.se1.main.R;
+
+public class RegisterUserActivity extends SherlockFragmentActivity {
+    private DatabaseOperation datasource;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_register_user);
+        getSupportActionBar().setTitle(R.string.title_activity_register_user);
+        datasource = new DatabaseOperation(this);
+        datasource.open();
+        Button registerUser = (Button)findViewById(R.id.registerUser);
+        final EditText password   = (EditText)findViewById(R.id.password);
+        final EditText firstName   = (EditText)findViewById(R.id.firstNameId);
+        final EditText lastName   = (EditText)findViewById(R.id.lastNameId);
+        final EditText email   = (EditText)findViewById(R.id.email);
+        final EditText confirmPassword   = (EditText)findViewById(R.id.confirmPassword);
+        final CheckBox loggedIn=(CheckBox)findViewById(R.id.loggedIn);
+
+        registerUser.setOnClickListener(
+                new View.OnClickListener()
+                {
+                    public void onClick(View view)
+                    {
+                        int loggedInValue = (loggedIn.isChecked())? 1 : 0;
+                        User user=datasource.getUserDetail();
+
+                        if(user!=null && (user.getEmailId()!= null || user.getEmailId().equalsIgnoreCase("")) )
+                        {
+
+                            Toast.makeText(getApplicationContext(),user.getEmailId() + " is already registered",
+                                    Toast.LENGTH_LONG).show();
+                        }
+                        else
+                        {
+                            if(email.getText().toString() == null || password.getText().toString() == null )
+                            {
+                                Toast.makeText(getApplicationContext(),"Please enter email id and password",
+                                        Toast.LENGTH_LONG).show();
+                            }
+                            else if(!password.getText().toString().equals(confirmPassword.getText().toString()))
+                            {
+                                Toast.makeText(getApplicationContext(),"Password and Confirm Password are not matching",
+                                        Toast.LENGTH_LONG).show();
+                            }
+                            else
+                            {
+                                Toast.makeText(getApplicationContext(), "You have been successfully registered!",
+                                        Toast.LENGTH_LONG).show();
+                                datasource.insertUser(email.getText().toString(),password.getText().toString(),loggedInValue,firstName.getText().toString(),lastName.getText().toString()) ;
+                                goToHomePage();
+                            }
+
+                        }
+
+
+                    }
+                });
+    }
+
+    //Navigate to Home page
+    public void goToHomePage()
+    {
+        Intent intent = new Intent(this, com.se1.navdrawer.NavigationMainActivity.class);
+        startActivity(intent);
+    }
+
+
+}
Index: res/layout/fragment_planet.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/fragment_planet.xml	(revision )
+++ res/layout/fragment_planet.xml	(revision )
@@ -0,0 +1,23 @@
+<!--
+  Copyright 2013 The Android Open Source Project
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+
+<ImageView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/image"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#000000"
+    android:gravity="center"
+    android:padding="32dp" />
Index: src/com/se1/Activity/SettingsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/Activity/SettingsActivity.java	(revision )
+++ src/com/se1/Activity/SettingsActivity.java	(revision )
@@ -0,0 +1,226 @@
+package com.se1.Activity;
+
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.net.Uri;
+import android.provider.MediaStore;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.android.AndroidAuthSession;
+import com.dropbox.client2.session.AccessTokenPair;
+import com.dropbox.client2.session.AppKeyPair;
+import com.dropbox.client2.session.TokenPair;
+import com.se1.DropBox.Constants;
+import com.se1.DropBox.DropboxDownload;
+import com.se1.DropBox.UploadFile;
+import com.se1.DropBox.Utils;
+import com.se1.dao.DatabaseOperation;
+import com.se1.dao.User;
+import com.se1.main.MainActivity;
+import com.se1.main.R;
+
+import java.io.File;
+import java.util.Date;
+
+public class SettingsActivity extends SherlockFragmentActivity implements View.OnClickListener {
+    private DatabaseOperation datasource;
+    /*
+    Dropbox variable
+     */
+    private static final int TAKE_PHOTO = 1;
+    private Button btnUpload, boxId;
+    private final String DIR = "/";
+    private File f;
+    private boolean mLoggedIn, onResume;
+    private DropboxAPI<AndroidAuthSession> mApi;
+    /*
+    Dropbox variable
+     */
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        getSupportActionBar().setTitle(R.string.title_activity_settings);
+        /*DropBox*/
+        AndroidAuthSession session = buildSession();
+        mApi = new DropboxAPI<AndroidAuthSession>(session);
+         // checkAppKeySetup();
+        setLoggedIn(false);
+
+        /*End of NavDrawer code*/
+
+        setContentView(R.layout.activity_home);
+        final Button logout   = (Button)findViewById(R.id.Logout);
+        datasource = new DatabaseOperation(this);
+
+        datasource.open();
+        logout.setOnClickListener(
+                new View.OnClickListener() {
+                    public void onClick(View view) {
+                        User user=datasource.getUserDetail();
+                        if(user!=null && ((user.getEmailId()!= null || user.getEmailId().equalsIgnoreCase("")) && user.getLoggedIn() == 1 ))
+                        {
+                            Toast.makeText(getApplicationContext(), "You have successfully Logout",
+                                    Toast.LENGTH_LONG).show();
+                            datasource.removeSignIn(user.getEmailId());
+                        }
+                        Intent intent = new Intent(SettingsActivity.this, MainActivity.class);
+                        intent.putExtra("Logout","Yes");
+                        startActivity(intent);
+                    }
+
+                });
+
+
+
+
+    }
+    //Navigate to registration page
+    public void goToResetPassword(View view)
+    {
+        Intent intent = new Intent(this, ResetPasswordActivity.class);
+        startActivity(intent);
+    }
+
+
+        /*Drop box code start */
+
+
+    private AndroidAuthSession buildSession() {
+        AppKeyPair appKeyPair = new AppKeyPair(Constants.DROPBOX_APP_KEY,
+                Constants.DROPBOX_APP_SECRET);
+        AndroidAuthSession session;
+
+        String[] stored = getKeys();
+        if (stored != null) {
+            AccessTokenPair accessToken = new AccessTokenPair(stored[0],
+                    stored[1]);
+            session = new AndroidAuthSession(appKeyPair, Constants.ACCESS_TYPE,
+                    accessToken);
+        } else {
+            session = new AndroidAuthSession(appKeyPair, Constants.ACCESS_TYPE);
+        }
+
+        return session;
+    }
+
+    private String[] getKeys() {
+        SharedPreferences prefs = getSharedPreferences(
+                Constants.ACCOUNT_PREFS_NAME, 0);
+        String key = prefs.getString(Constants.ACCESS_KEY_NAME, null);
+        String secret = prefs.getString(Constants.ACCESS_SECRET_NAME, null);
+        if (key != null && secret != null) {
+            String[] ret = new String[2];
+            ret[0] = key;
+            ret[1] = secret;
+            return ret;
+        } else {
+            return null;
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        if (v == boxId) {
+            startActivity(new Intent(SettingsActivity.this, DropboxDownload.class));
+        } else if (v == btnUpload) {
+            createDir();
+            if (mLoggedIn) {
+                logOut();
+            }
+            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+            f = new File(Utils.getPath(),new Date().getTime()+".jpg");
+            intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(f));
+            startActivityForResult(intent, TAKE_PHOTO);
+        }
+    }
+
+    private void logOut() {
+        mApi.getSession().unlink();
+
+        clearKeys();
+    }
+
+    private void clearKeys() {
+        SharedPreferences prefs = getSharedPreferences(
+                Constants.ACCOUNT_PREFS_NAME, 0);
+        SharedPreferences.Editor edit = prefs.edit();
+        edit.clear();
+        edit.commit();
+    }
+
+    private void createDir() {
+        File dir = new File(Utils.getPath());
+        if (!dir.exists()) {
+            dir.mkdirs();
+        }
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (resultCode == RESULT_OK) {
+            if (requestCode == TAKE_PHOTO) {
+//				f = new File(Utils.getPath() + "/temp.jpg");
+                if (Utils.isOnline(SettingsActivity.this)) {
+                    mApi.getSession().startAuthentication(SettingsActivity.this);
+                    onResume = true;
+                } else {
+                    Utils.showNetworkAlert(SettingsActivity.this);
+                }
+            }
+        }
+    }
+
+    public void setLoggedIn(boolean loggedIn) {
+        mLoggedIn = loggedIn;
+        if (loggedIn) {
+            //instead of f send file from sd card
+            UploadFile upload = new UploadFile(SettingsActivity.this, mApi, DIR, f);
+            upload.execute();
+            onResume = false;
+
+        }
+    }
+
+    private void storeKeys(String key, String secret) {
+        SharedPreferences prefs = getSharedPreferences(
+                Constants.ACCOUNT_PREFS_NAME, 0);
+        SharedPreferences.Editor edit = prefs.edit();
+        edit.putString(Constants.ACCESS_KEY_NAME, key);
+        edit.putString(Constants.ACCESS_SECRET_NAME, secret);
+        edit.commit();
+    }
+
+    private void showToast(String msg) {
+        Toast error = Toast.makeText(this, msg, Toast.LENGTH_LONG);
+        error.show();
+    }
+
+    @Override
+    protected void onResume() {
+
+        AndroidAuthSession session = mApi.getSession();
+
+        if (session.authenticationSuccessful()) {
+            try {
+                session.finishAuthentication();
+
+                TokenPair tokens = session.getAccessTokenPair();
+                storeKeys(tokens.key, tokens.secret);
+                setLoggedIn(onResume);
+            } catch (IllegalStateException e) {
+                showToast("Couldn't authenticate with Dropbox:"
+                        + e.getLocalizedMessage());
+            }
+        }
+        super.onResume();
+    }
+
+    /*DropBox code End*/
+
+}
Index: res/layout/pager.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/pager.xml	(revision )
+++ res/layout/pager.xml	(revision )
@@ -0,0 +1,23 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <com.astuetz.PagerSlidingTabStrip
+        android:id="@+id/tabs"
+        android:layout_width="match_parent"
+        android:layout_height="48dip"
+        android:background="@drawable/background_tabs" />
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/pager"
+        android:background="#000000"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_above="@+id/colors"
+        android:layout_below="@+id/tabs"
+        tools:context=".MainActivity" />
+
+</RelativeLayout>
Index: src/com/se1/dao/Mail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/dao/Mail.java	(revision )
+++ src/com/se1/dao/Mail.java	(revision )
@@ -0,0 +1,190 @@
+package com.se1.dao;
+
+import java.util.Date;
+import java.util.Properties;
+import javax.activation.CommandMap;
+import javax.activation.DataHandler;
+import javax.activation.DataSource;
+import javax.activation.FileDataSource;
+import javax.activation.MailcapCommandMap;
+import javax.mail.BodyPart;
+import javax.mail.Multipart;
+import javax.mail.PasswordAuthentication;
+import javax.mail.Session;
+import javax.mail.Transport;
+import javax.mail.internet.InternetAddress;
+import javax.mail.internet.MimeBodyPart;
+import javax.mail.internet.MimeMessage;
+import javax.mail.internet.MimeMultipart;
+
+
+public class Mail extends javax.mail.Authenticator {
+    private String _user;
+    private String _pass;
+
+    public String[] get_to() {
+        return _to;
+    }
+
+    public void set_to(String[] _to) {
+        this._to = _to;
+    }
+
+    public String get_from() {
+        return _from;
+    }
+
+    public void set_from(String _from) {
+        this._from = _from;
+    }
+
+    public String get_subject() {
+        return _subject;
+    }
+
+    public void set_subject(String _subject) {
+        this._subject = _subject;
+    }
+
+    public String get_body() {
+        return _body;
+    }
+
+    public void set_body(String _body) {
+        this._body = _body;
+    }
+
+    private String[] _to;
+    private String _from;
+
+    private String _port;
+    private String _sport;
+
+    private String _host;
+
+    private String _subject;
+    private String _body;
+
+    private boolean _auth;
+
+    private boolean _debuggable;
+
+    private Multipart _multipart;
+
+
+    public Mail() {
+        _host = "smtp.gmail.com"; // default smtp server
+        _port = "465"; // default smtp port
+        _sport = "465"; // default socketfactory port
+
+        _user = "cloud360user@gmail.com"; // username
+        _pass = "cloud360@"; // password
+        _from = "cloud360user@gmail.com"; // email sent from
+        _subject = "hello"; // email subject
+        _body = "How are you?"; // email body
+
+        _debuggable = false; // debug mode on or off - default off
+        _auth = true; // smtp authentication - default on
+
+        _multipart = new MimeMultipart();
+
+        // There is something wrong with MailCap, javamail can not find a handler for the multipart/mixed part, so this bit needs to be added.
+        MailcapCommandMap mc = (MailcapCommandMap) CommandMap.getDefaultCommandMap();
+        mc.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
+        mc.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
+        mc.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
+        mc.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
+        mc.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
+        CommandMap.setDefaultCommandMap(mc);
+    }
+
+    public Mail(String user, String pass) {
+        this();
+
+        _user = user;
+        _pass = pass;
+    }
+
+    public boolean send() throws Exception {
+        Properties props = _setProperties();
+
+        if(!_user.equals("") && !_pass.equals("") && _to.length > 0 && !_from.equals("") && !_subject.equals("") && !_body.equals("")) {
+            Session session = Session.getInstance(props, this);
+
+            MimeMessage msg = new MimeMessage(session);
+
+            msg.setFrom(new InternetAddress(_from));
+
+            InternetAddress[] addressTo = new InternetAddress[_to.length];
+            for (int i = 0; i < _to.length; i++) {
+                addressTo[i] = new InternetAddress(_to[i]);
+            }
+            msg.setRecipients(MimeMessage.RecipientType.TO, addressTo);
+
+            msg.setSubject(_subject);
+            msg.setSentDate(new Date());
+
+            // setup message body
+            BodyPart messageBodyPart = new MimeBodyPart();
+            messageBodyPart.setText(_body);
+            _multipart.addBodyPart(messageBodyPart);
+
+            // Put parts in message
+            msg.setContent(_multipart);
+
+            // send email
+            Transport.send(msg);
+
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public void addAttachment(String filename) throws Exception {
+        BodyPart messageBodyPart = new MimeBodyPart();
+        DataSource source = new FileDataSource(filename);
+        messageBodyPart.setDataHandler(new DataHandler(source));
+        messageBodyPart.setFileName(filename);
+
+        _multipart.addBodyPart(messageBodyPart);
+    }
+
+    @Override
+    public PasswordAuthentication getPasswordAuthentication() {
+        return new PasswordAuthentication(_user, _pass);
+    }
+
+    private Properties _setProperties() {
+        Properties props = new Properties();
+
+        props.put("mail.smtp.host", _host);
+
+        if(_debuggable) {
+            props.put("mail.debug", "true");
+        }
+
+        if(_auth) {
+            props.put("mail.smtp.auth", "true");
+        }
+
+        props.put("mail.smtp.port", _port);
+        props.put("mail.smtp.socketFactory.port", _sport);
+        props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
+        props.put("mail.smtp.socketFactory.fallback", "false");
+
+        return props;
+    }
+
+    // the getters and setters
+    public String getBody() {
+        return _body;
+    }
+
+    public void setBody(String _body) {
+        this._body = _body;
+    }
+
+    // more of the getters and setters …..
+}
+
Index: res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/values/colors.xml	(revision )
+++ res/values/colors.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="background_window">#fff</color>
+    <color name="header">#00bcd4</color>
+    <color name="bg">#fff</color>
+    <color name="btnbg">#00bcd4</color>
+
+</resources>
\ No newline at end of file
Index: src/com/se1/Activity/ResetPasswordActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/Activity/ResetPasswordActivity.java	(revision )
+++ src/com/se1/Activity/ResetPasswordActivity.java	(revision )
@@ -0,0 +1,99 @@
+package com.se1.Activity;
+
+import android.content.Intent;
+
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+import com.se1.dao.DatabaseOperation;
+import com.se1.dao.User;
+import com.se1.main.MainActivity;
+import com.se1.main.R;
+
+public class ResetPasswordActivity extends SherlockFragmentActivity {
+    private DatabaseOperation datasource;
+    int noOfAttempts;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_reset_password);
+        getSupportActionBar().setTitle(R.string.title_activity_reset_password);
+        final Button resetPassword   = (Button)findViewById(R.id.resetPassword);
+        final EditText oldPassword   = (EditText)findViewById(R.id.oldPassText);
+        final EditText newPassword   = (EditText)findViewById(R.id.newPassText);
+        final EditText confirmPassword   = (EditText)findViewById(R.id.confirmPasswordtext);
+        noOfAttempts=0;
+        datasource = new DatabaseOperation(this);
+        datasource.open();
+
+        resetPassword.setOnClickListener(
+                new View.OnClickListener() {
+                    public void onClick(View view) {
+                        User user=datasource.getUserDetail();
+                        if(confirmPassword.getText().toString().equalsIgnoreCase("") || confirmPassword.getText().toString() == null )
+                        {
+                            Toast.makeText(getApplicationContext(), "Please enter confirm Password",
+                                    Toast.LENGTH_LONG).show();
+                        }
+                        else if(newPassword.getText().toString().equals("") || newPassword.getText().toString() == null )
+                        {
+                            Toast.makeText(getApplicationContext(), "Please enter new Password",
+                                    Toast.LENGTH_LONG).show();
+                        }
+                        else if(!newPassword.getText().toString().equals(confirmPassword.getText().toString()))
+                        {
+                            Toast.makeText(getApplicationContext(), "New Password and Confirm Password are not matching",
+                                    Toast.LENGTH_LONG).show();
+                        }
+                        else if(user!=null && ((user.getEmailId()!= null || user.getEmailId().equalsIgnoreCase(""))))
+                        {
+                            if(user.getPassword().equals(oldPassword.getText().toString()))
+                            {
+                                datasource.resetPassword(user.getEmailId(),newPassword.getText().toString());
+                                Toast.makeText(getApplicationContext(), "Password is Successfully Reset ",
+                                        Toast.LENGTH_LONG).show();
+                                Intent intent = new Intent(ResetPasswordActivity.this, MainActivity.class);
+                                intent.putExtra("Logout","Yes");
+                                startActivity(intent);
+                            }
+                            else {
+                                setNoOfAttempts();
+                                if(noOfAttempts == 3)
+                                {
+                                    goToLoginPage(user.getEmailId());
+                                }
+                                Toast.makeText(getApplicationContext(), "Please Enter Valid Password",
+                                        Toast.LENGTH_LONG).show();
+                            }
+
+                        }
+                    }
+
+                });
+    }
+    //Navigate to Login page
+    public void goToHomePage()
+    {
+        Intent intent = new Intent(this, SettingsActivity.class);
+        startActivity(intent);
+    }
+    //Navigate to Login page
+    public void goToLoginPage(String emaildId)
+    {
+        datasource.removeSignIn(emaildId);// Go to login page and remove signup option
+        Intent intent = new Intent(this, MainActivity.class);
+        startActivity(intent);
+    }
+    public int getNoOfAttempts() {
+        return noOfAttempts;
+    }
+
+    public void setNoOfAttempts() {
+        noOfAttempts++;
+    }
+
+}
Index: src/com/se1/DropBox/DownloadFileAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/DownloadFileAdapter.java	(revision )
+++ src/com/se1/DropBox/DownloadFileAdapter.java	(revision )
@@ -0,0 +1,82 @@
+package com.se1.DropBox;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.dropbox.client2.DropboxAPI.Entry;
+import com.se1.main.R;
+
+import java.util.ArrayList;
+
+public class DownloadFileAdapter extends BaseAdapter {
+
+	// private Context context;
+	private ArrayList<Entry> files;
+	private View view;
+	private LayoutInflater lInflater;
+
+	public DownloadFileAdapter(Context context, ArrayList<Entry> files) {
+		// this.context = context;
+		this.files = files;
+		lInflater = (LayoutInflater) context
+				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+	}
+
+	@Override
+	public int getCount() {
+		return files.size();
+	}
+
+	@Override
+	public Object getItem(int position) {
+		return position;
+	}
+
+	@Override
+	public long getItemId(int position) {
+		return position;
+	}
+
+	private class Holder {
+		ImageView ivImageFolderOrFile, ivImageDownloadOrBrowableDir;
+		TextView tvDownloadFileOrFolderName;
+	}
+
+	@Override
+	public View getView(int position, View convertView, ViewGroup parent) {
+		final Holder holder;
+		view = convertView;
+		if (view == null) {
+			holder = new Holder();
+			view = lInflater.inflate(R.layout.downloadfileinflater, null);
+			holder.ivImageDownloadOrBrowableDir = (ImageView) view
+					.findViewById(R.id.ivImageDownloadOrBrowableDir);
+			holder.ivImageFolderOrFile = (ImageView) view
+					.findViewById(R.id.ivImageFolderOrFile);
+			holder.tvDownloadFileOrFolderName = (TextView) view
+					.findViewById(R.id.tvDownloadFileFileName);
+			view.setTag(holder);
+		} else {
+			holder = (Holder) view.getTag();
+		}
+		Entry file = files.get(position);
+		if (!file.isDir) {
+			holder.ivImageDownloadOrBrowableDir
+					.setImageResource(R.drawable.downloadicon);
+			holder.ivImageFolderOrFile.setImageResource(R.drawable.fileicon);
+		} else {
+			holder.ivImageDownloadOrBrowableDir
+					.setImageResource(R.drawable.browsedirectoryicon);
+			holder.ivImageFolderOrFile
+					.setImageResource(R.drawable.dropboxdiricon);
+		}
+		holder.tvDownloadFileOrFolderName.setText(file.fileName());
+		return view;
+	}
+
+}
Index: project.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- project.properties	(revision )
+++ project.properties	(revision )
@@ -0,0 +1,16 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-18
+android.library.reference.1=../../workspace/PagerSlidingTabStrip-1.0.1
+android.library.reference.2=../../workspace/ActionBarSherlock-4.4.0
Index: res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/values/styles.xml	(revision )
+++ res/values/styles.xml	(revision )
@@ -0,0 +1,13 @@
+<resources>
+
+    <style name="AppBaseTheme" parent="android:Theme.Light"></style>
+
+
+    <style name="AppTheme" parent="AppBaseTheme">
+        <item name="android:windowBackground">@color/background_window</item>
+
+    </style>
+
+
+
+</resources>
\ No newline at end of file
Index: res/layout/dropbox_login_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/dropbox_login_main.xml	(revision )
+++ res/layout/dropbox_login_main.xml	(revision )
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@color/header"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/textView1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/drop_box"
+            android:padding="10dp"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:textColor="@android:color/black"
+            android:textStyle="bold" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@color/bg"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:orientation="horizontal"
+            android:layout_height="wrap_content" >
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="0.3"
+                android:orientation="vertical" >
+
+            </LinearLayout>
+
+            <Button
+                android:id="@+id/dropbox_login"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:background="@color/btnbg"
+                android:padding="10dp"
+                android:text="@string/dropbox_Login"
+                android:textColor="@android:color/white"
+                android:textStyle="bold" />
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="0.3"
+                android:orientation="vertical" >
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal" >
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="0.3"
+                android:orientation="vertical" >
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="0.3"
+                android:orientation="vertical" >
+            </LinearLayout>
+        </LinearLayout>
+
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision )
+++ pom.xml	(revision )
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.astuetz.pagerslidingtabstrip</groupId>
+		<artifactId>pagerslidingtabstrip-parent</artifactId>
+		<version>1.0-SNAPSHOT</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<name>PagerSlidingTabStrip Sample</name>
+	<artifactId>pagerslidingtabstrip-sample</artifactId>
+	<packaging>apk</packaging>
+
+	<scm>
+		<url>git@github.com:astuetz/PagerSlidingTabStrip.git</url>
+		<connection>scm:git:git://github.com:astuetz/PagerSlidingTabStrip.git</connection>
+		<developerConnection>scm:git:git@github.com:astuetz/PagerSlidingTabStrip.git</developerConnection>
+	</scm>
+
+	<licenses>
+		<license>
+			<name>The Apache Software License, Version 2.0</name>
+			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
+			<distribution>repo</distribution>
+		</license>
+	</licenses>
+
+	<properties>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+		<android.version>4.2.2_r2</android.version>
+		<android.version.platform>17</android.version.platform>
+	</properties>
+
+	<dependencies>
+
+		<dependency>
+			<groupId>android</groupId>
+			<artifactId>android</artifactId>
+			<version>${android.version}</version>
+			<scope>provided</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>com.astuetz.pagerslidingtabstrip</groupId>
+			<artifactId>pagerslidingtabstrip</artifactId>
+			<version>${project.version}</version>
+			<type>apklib</type>
+		</dependency>
+
+	</dependencies>
+
+	<build>
+		<sourceDirectory>src</sourceDirectory>
+
+		<plugins>
+			<plugin>
+				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
+				<artifactId>android-maven-plugin</artifactId>
+				<extensions>true</extensions>
+				<configuration>
+					<sdk>
+						<platform>${android.version.platform}</platform>
+					</sdk>
+					<undeployBeforeDeploy>true</undeployBeforeDeploy>
+					<lazyLibraryUnpack>true</lazyLibraryUnpack>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
Index: src/com/se1/DropBox/UploadFileToDropbox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/UploadFileToDropbox.java	(revision )
+++ src/com/se1/DropBox/UploadFileToDropbox.java	(revision )
@@ -0,0 +1,63 @@
+package com.se1.DropBox;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.widget.Toast;
+
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.exception.DropboxException;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+
+public class UploadFileToDropbox extends AsyncTask<Void, Void, Boolean> {
+
+    private DropboxAPI<?> dropbox;
+    private String path;
+    private Context context;
+
+    public UploadFileToDropbox(Context context, DropboxAPI<?> dropbox,
+                               String path) {
+        this.context = context.getApplicationContext();
+        this.dropbox = dropbox;
+        this.path = path;
+    }
+
+    @Override
+    protected Boolean doInBackground(Void... params) {
+        final File tempDir = context.getCacheDir();
+        File tempFile;
+        FileWriter fr;
+        try {
+            tempFile = File.createTempFile("file", ".txt", tempDir);
+            fr = new FileWriter(tempFile);
+            fr.write("Sample text file created for demo purpose. You may use some other file format for your app ");
+            fr.close();
+
+            FileInputStream fileInputStream = new FileInputStream(tempFile);
+            dropbox.putFile(path + "textfile.txt", fileInputStream,
+                    tempFile.length(), null, null);
+            tempFile.delete();
+            return true;
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (DropboxException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    @Override
+    protected void onPostExecute(Boolean result) {
+        if (result) {
+            Toast.makeText(context, "File Uploaded Sucesfully!",
+                    Toast.LENGTH_LONG).show();
+        } else {
+            Toast.makeText(context, "Failed to upload file", Toast.LENGTH_LONG)
+                    .show();
+        }
+    }
+}
\ No newline at end of file
Index: src/com/se1/DropBox/DropboxDownload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/DropboxDownload.java	(revision )
+++ src/com/se1/DropBox/DropboxDownload.java	(revision )
@@ -0,0 +1,465 @@
+package com.se1.DropBox;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.AlertDialog.Builder;
+import android.app.Fragment;
+import android.app.ProgressDialog;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.content.pm.PackageManager;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockFragment;
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.DropboxAPI.DropboxInputStream;
+import com.dropbox.client2.DropboxAPI.Entry;
+import com.dropbox.client2.android.AndroidAuthSession;
+import com.dropbox.client2.android.AuthActivity;
+import com.dropbox.client2.exception.DropboxException;
+import com.dropbox.client2.session.AccessTokenPair;
+import com.dropbox.client2.session.AppKeyPair;
+import com.dropbox.client2.session.TokenPair;
+import com.se1.main.R;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+
+
+public class DropboxDownload extends Activity implements OnItemClickListener {
+    private DropboxAPI<AndroidAuthSession> mApi;
+    private String DIR = "/";
+    private ArrayList<Entry> files;
+    private ArrayList<String> dir;
+    private boolean isItemClicked = false;
+    // , onResume = false;
+    private ListView lvDropboxDownloadFilesList;
+
+    private Context mContext;
+    private ImageView mView;
+    private Drawable mDrawable;
+    private FileOutputStream mFos;
+    private String mErrorMsg;
+    private boolean mCanceled;
+    private Long mFileLen;
+    // private Button btnDropboxDownloadDone;
+    private ProgressDialog pd;
+    private Handler mHandler = new Handler() {
+        public void handleMessage(android.os.Message msg) {
+            if (msg.what == 0) {
+                lvDropboxDownloadFilesList.setAdapter(new DownloadFileAdapter(
+                        DropboxDownload.this, files));
+                pd.dismiss();
+            } else if (msg.what == 1) {
+                Toast.makeText(DropboxDownload.this,
+                        "File save at " + msg.obj.toString(), Toast.LENGTH_LONG)
+                        .show();
+            }
+        };
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.dropboxdownload);
+
+        mContext =getApplicationContext();
+        mView = (ImageView)findViewById(R.id.image_view);
+        lvDropboxDownloadFilesList = (ListView) findViewById(R.id.lvDropboxDownloadFilesList);
+        AndroidAuthSession session = buildSession();
+        mApi = new DropboxAPI<AndroidAuthSession>(session);
+
+        checkAppKeySetup();
+        // setLoggedIn(false);
+        if (!Constants.mLoggedIn)
+            mApi.getSession().startAuthentication(DropboxDownload.this);
+
+        lvDropboxDownloadFilesList.setOnItemClickListener(this);
+    }
+
+    @Override
+    public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
+
+        Entry fileSelected = files.get(arg2);
+        if (fileSelected.isDir) {
+            isItemClicked = true;
+            DIR = dir.get(arg2);
+            setLoggedIn(true);
+        } else {
+
+            downloadDropboxFile(fileSelected);
+            // getIntent().getStringExtra("fileParentPath"));
+        }
+    }
+
+    // @Override
+    // public void onClick(View v) {
+    // if (v == btnDropboxDownloadDone) {
+    // setResult(RESULT_OK);
+    // this.finish();
+    // }
+    // }
+
+    private void checkAppKeySetup() {
+        if (Constants.DROPBOX_APP_KEY.startsWith("CHANGE")
+                || Constants.DROPBOX_APP_SECRET.startsWith("CHANGE")) {
+            showToast("You must apply for an app key and secret from developers.dropbox.com, and add them to the DBRoulette ap before trying it.");
+            finish();
+            return;
+        }
+        Intent testIntent = new Intent(Intent.ACTION_VIEW);
+        String scheme = "db-" + Constants.DROPBOX_APP_KEY;
+        String uri = scheme + "://" + AuthActivity.AUTH_VERSION + "/test";
+        testIntent.setData(Uri.parse(uri));
+        PackageManager pm = getPackageManager();
+        if (0 == pm.queryIntentActivities(testIntent, 0).size()) {
+            showToast("URL scheme in your app's "
+                    + "manifest is not set up correctly. You should have a "
+                    + "com.dropbox.client2.android.AuthActivity with the "
+                    + "scheme: " + scheme);
+            finish();
+        }
+    }
+
+    private void showToast(String msg) {
+        Toast error = Toast.makeText(this, msg, Toast.LENGTH_LONG);
+        error.show();
+    }
+
+    private AndroidAuthSession buildSession() {
+        AppKeyPair appKeyPair = new AppKeyPair(Constants.DROPBOX_APP_KEY,
+                Constants.DROPBOX_APP_SECRET);
+        AndroidAuthSession session;
+
+        String[] stored = getKeys();
+        if (stored != null) {
+            AccessTokenPair accessToken = new AccessTokenPair(stored[0],
+                    stored[1]);
+            session = new AndroidAuthSession(appKeyPair, Constants.ACCESS_TYPE,
+                    accessToken);
+        } else {
+            session = new AndroidAuthSession(appKeyPair, Constants.ACCESS_TYPE);
+        }
+
+        return session;
+    }
+
+    public void setLoggedIn(final boolean loggedIn) {
+        pd = ProgressDialog.show(DropboxDownload.this, null,
+                "Retrieving data...");
+        new Thread(new Runnable() {
+
+            @Override
+            public void run() {
+                Constants.mLoggedIn = loggedIn;
+                if (loggedIn) {
+                    int i = 0;
+                    com.dropbox.client2.DropboxAPI.Entry dirent;
+                    try {
+                        dirent = mApi.metadata(DIR, 1000, null, true, null);
+                        files = new ArrayList<com.dropbox.client2.DropboxAPI.Entry>();
+                        dir = new ArrayList<String>();
+                        for (com.dropbox.client2.DropboxAPI.Entry ent : dirent.contents) {
+                            files.add(ent);
+                            dir.add(new String(files.get(i++).path));
+                        }
+                        i = 0;
+                        mHandler.sendEmptyMessage(0);
+                    } catch (DropboxException e) {
+                        e.printStackTrace();
+                    }
+
+                }
+            }
+        }).start();
+
+    }
+
+    @Override
+    protected void onResume() {
+
+        super.onResume();
+        AndroidAuthSession session = mApi.getSession();
+
+        if (session.authenticationSuccessful()) {
+            try {
+                session.finishAuthentication();
+
+                TokenPair tokens = session.getAccessTokenPair();
+                storeKeys(tokens.key, tokens.secret);
+                setLoggedIn(true);
+            } catch (IllegalStateException e) {
+                showToast("Couldn't authenticate with Dropbox:"
+                        + e.getLocalizedMessage());
+            }
+        }
+    }
+
+    private void storeKeys(String key, String secret) {
+        SharedPreferences prefs = getSharedPreferences(
+                Constants.ACCOUNT_PREFS_NAME, 0);
+        Editor edit = prefs.edit();
+        edit.putString(Constants.ACCESS_KEY_NAME, key);
+        edit.putString(Constants.ACCESS_SECRET_NAME, secret);
+        edit.commit();
+    }
+
+
+    private String[] getKeys() {
+        SharedPreferences prefs = getSharedPreferences(
+                Constants.ACCOUNT_PREFS_NAME, 0);
+        String key = prefs.getString(Constants.ACCESS_KEY_NAME, null);
+        String secret = prefs.getString(Constants.ACCESS_SECRET_NAME, null);
+        if (key != null && secret != null) {
+            String[] ret = new String[2];
+            ret[0] = key;
+            ret[1] = secret;
+            return ret;
+        } else {
+            return null;
+        }
+    }
+
+    private boolean downloadDropboxFile(Entry fileSelected) {// , String
+        // localFilePath)
+        // {
+        File dir = new File(Utils.getPath());
+        if (!dir.exists())
+            dir.mkdirs();
+        if((fileSelected.mimeType).equalsIgnoreCase("image/png") || ( fileSelected.mimeType).equalsIgnoreCase("image/jpeg") ) {
+            try {
+                File localFile = new File(dir + "/" + fileSelected.fileName());
+                if (!localFile.exists()) {
+                    localFile.createNewFile();
+                    copy(fileSelected, localFile,dir,"image/png");
+                } else {
+                    showFileExitsDialog(fileSelected, localFile,dir,"image/png");
+
+
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        else if((fileSelected.mimeType).equalsIgnoreCase("application/pdf"))
+        {
+            try {
+                File localFile = new File(dir + "/" + fileSelected.fileName());
+                if (!localFile.exists()) {
+                    localFile.createNewFile();
+                    copy(fileSelected, localFile,dir,"application/pdf");
+                } else {
+                    showFileExitsDialog(fileSelected, localFile,dir,"application/pdf");
+
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+
+        }
+        else if((fileSelected.mimeType).equalsIgnoreCase("text/plain"))
+        {
+            try {
+                File localFile = new File(dir + "/" + fileSelected.fileName());
+                if (!localFile.exists()) {
+                    localFile.createNewFile();
+                    copy(fileSelected, localFile,dir,"text/plain");
+                } else {
+                    showFileExitsDialog(fileSelected, localFile,dir,"text/plain");
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        else
+        {
+            try {
+                File localFile = new File(dir + "/" + fileSelected.fileName());
+
+                if (!localFile.exists()) {
+                    localFile.createNewFile();
+                    copy(fileSelected, localFile,dir,"NA");
+                } else {
+                    showFileExitsDialog(fileSelected, localFile,dir,"NA");
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        return true;
+    }
+
+
+
+    private void openFile(File dir,final Entry fileSelected,String type) {
+        File file = new File(dir + "/" + fileSelected.fileName());
+        Uri localpath = Uri.fromFile(file);
+        Intent intent = new Intent(Intent.ACTION_VIEW);
+        intent.setDataAndType(localpath,type);
+        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+        try {
+            mContext.startActivity(intent);
+        }
+        catch (ActivityNotFoundException e) {
+            Log.d("Error","No Application Available to View this file");
+        }
+    }
+	/*copy file from dropbox to local directory*/
+
+    private void copy(final Entry fileSelected, final File localFile, final File dir,String type) {
+        final ProgressDialog pd = ProgressDialog.show(DropboxDownload.this,
+                "Downloading...", "Please wait...");
+        Log.d("fileSelected.path","fileSelected.path"+fileSelected.path);
+        new Thread(new Runnable() {
+
+            @Override
+            public void run() {
+                BufferedInputStream br = null;
+                BufferedOutputStream bw = null;
+                DropboxInputStream fd;
+                try {
+                    fd = mApi.getFileStream(fileSelected.path,
+                            localFile.getPath());
+                    br = new BufferedInputStream(fd);
+                    bw = new BufferedOutputStream(new FileOutputStream(
+                            localFile));
+
+                    byte[] buffer = new byte[4096];
+                    int read;
+                    while (true) {
+                        read = br.read(buffer);
+                        if (read <= 0) {
+                            break;
+                        }
+                        bw.write(buffer, 0, read);
+                    }
+                    pd.dismiss();
+                    Message message = new Message();
+                    message.obj = localFile.getAbsolutePath();
+                    message.what = 1;
+                    mHandler.sendMessage(message);
+                    if((fileSelected.mimeType).equalsIgnoreCase("image/png"))
+                        openFile(dir,fileSelected,"image/png");
+                    else if((fileSelected.mimeType).equalsIgnoreCase("image/jpeg"))
+                        openFile(dir,fileSelected,"image/jpeg");
+                    else if((fileSelected.mimeType).equalsIgnoreCase("image/jpg"))
+                        openFile(dir,fileSelected,"image/jpg");
+                    else if((fileSelected.mimeType).equalsIgnoreCase("text/plain"))
+                        openFile(dir,fileSelected,"text/plain");
+                    else if((fileSelected.mimeType).equalsIgnoreCase("application/pdf"))
+                        openFile(dir,fileSelected,"application/pdf");
+                    else
+                    {
+                        showToast("Could not open this file type");
+                    }
+                } catch (DropboxException e) {
+                    e.printStackTrace();
+                } catch (FileNotFoundException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                } finally {
+                    if (bw != null) {
+                        try {
+                            bw.close();
+                            if (br != null) {
+                                br.close();
+                            }
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                        }
+                    }
+
+                }
+            }
+        }).start();
+
+    }
+
+    private void showFileExitsDialog(final Entry fileSelected,
+                                     final File localFile,final File dir, final String type) {
+        AlertDialog.Builder alertBuilder = new Builder(DropboxDownload.this);
+        alertBuilder.setMessage(Constants.OVERRIDEMSG);
+        alertBuilder.setPositiveButton("Ok",
+                new DialogInterface.OnClickListener() {
+
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        copy(fileSelected, localFile,dir,type);
+                    }
+                });
+        alertBuilder.setNegativeButton("Cancel",
+                new DialogInterface.OnClickListener() {
+
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        if((fileSelected.mimeType).equalsIgnoreCase("image/png"))
+                            openFile(dir,fileSelected,"image/png");
+                        else if((fileSelected.mimeType).equalsIgnoreCase("image/jpeg"))
+                            openFile(dir,fileSelected,"image/jpeg");
+                        else if((fileSelected.mimeType).equalsIgnoreCase("image/jpg"))
+                            openFile(dir,fileSelected,"image/jpg");
+                        else if((fileSelected.mimeType).equalsIgnoreCase("text/plain"))
+                            openFile(dir,fileSelected,"text/plain");
+                        else if((fileSelected.mimeType).equalsIgnoreCase("application/pdf"))
+                            openFile(dir,fileSelected,"application/pdf");
+                        else
+                        {
+                            showToast("Could not open this file type");
+                        }
+                    }
+                });
+
+        alertBuilder.create().show();
+
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (isItemClicked) {
+            if (DIR.length() == 0) {
+                // logOut();
+                setResult(RESULT_OK);
+                super.onBackPressed();
+            } else {
+                DIR = DIR.substring(0, DIR.lastIndexOf('/'));
+                setLoggedIn(true);
+
+            }
+        } else {
+            setResult(RESULT_OK);
+            super.onBackPressed();
+        }
+
+    }
+
+}
Index: res/layout/downloadfileinflater.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/downloadfileinflater.xml	(revision )
+++ res/layout/downloadfileinflater.xml	(revision )
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        android:padding="5dp" >
+
+        <ImageView
+            android:id="@+id/ivImageFolderOrFile"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/dropboxdiricon" />
+
+        <TextView
+            android:id="@+id/tvDownloadFileFileName"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="5dp"
+            android:layout_marginRight="5dp"
+            android:layout_weight="1"
+            android:ellipsize="end"
+            android:minWidth="150dp"
+            android:scrollHorizontally="true"
+            android:singleLine="true"
+            android:text="TextView" />
+
+        <ImageView
+            android:id="@+id/ivImageDownloadOrBrowableDir"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/browsedirectoryicon" />
+
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: src/com/se1/DropBox/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/Utils.java	(revision )
+++ src/com/se1/DropBox/Utils.java	(revision )
@@ -0,0 +1,49 @@
+package com.se1.DropBox;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.Environment;
+
+import java.io.File;
+
+public class Utils {
+	public static String getPath() {
+		String path = "";
+		if (Environment.getExternalStorageState().equals(
+				Environment.MEDIA_MOUNTED)) {
+			path = Environment.getExternalStorageDirectory().getAbsolutePath();
+		} else if ((new File("/mnt/emmc")).exists()) {
+			path = "/mnt/emmc";
+		} else {
+			path = Environment.getExternalStorageDirectory().getAbsolutePath();
+		}
+		return path + "/CloudSync";
+	}
+
+	public static boolean isOnline(Context context) {
+		ConnectivityManager cm = (ConnectivityManager) context
+				.getSystemService(Context.CONNECTIVITY_SERVICE);
+		NetworkInfo netInfo = cm.getActiveNetworkInfo();
+		if (netInfo != null && netInfo.isConnectedOrConnecting()) {
+			return true;
+		}
+		return false;
+	}
+
+	public static void showNetworkAlert(Context context) {
+		AlertDialog.Builder builder = new AlertDialog.Builder(context);
+		builder.setTitle("Network Alert");
+		builder.setMessage("Please check your network connection and try again");
+		builder.setNeutralButton("OK", new DialogInterface.OnClickListener() {
+
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				dialog.dismiss();
+			}
+		});
+		builder.show();
+	}
+}
Index: res/layout-land/fragment_quick_contact.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout-land/fragment_quick_contact.xml	(revision )
+++ res/layout-land/fragment_quick_contact.xml	(revision )
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content" >
+
+    <ImageView
+        android:id="@+id/image"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_toLeftOf="@+id/center"
+        android:scaleType="centerCrop"
+        android:src="@drawable/contact" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignBottom="@+id/image"
+        android:layout_alignParentLeft="true"
+        android:layout_toLeftOf="@+id/center"
+        android:background="#77000000"
+        android:paddingBottom="14dip"
+        android:paddingLeft="8dip"
+        android:paddingTop="14dip"
+        android:text="Quick Contact"
+        android:textColor="#FFFFFFFF"
+        android:textSize="18sp" />
+
+    <View
+        android:id="@+id/center"
+        android:layout_width="0dip"
+        android:layout_height="match_parent"
+        android:layout_centerHorizontal="true" />
+
+    <com.astuetz.PagerSlidingTabStrip 
+        android:id="@+id/tabs"
+        android:layout_width="wrap_content"
+        android:layout_height="62dip"
+        android:layout_alignParentRight="true"
+        android:layout_toRightOf="@+id/center"
+        android:background="@drawable/background_tabs_diagonal"
+        app:pstsDividerColor="#00000000"
+		app:pstsIndicatorColor="#FF33B5E6"
+		app:pstsTabPaddingLeftRight="14dip"
+		app:pstsUnderlineColor="#FF33B5E6"/>
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/pager"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_below="@+id/tabs"
+        android:layout_toRightOf="@+id/center" />
+
+</RelativeLayout>
\ No newline at end of file
Index: res/values-sw720dp-land/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/values-sw720dp-land/dimens.xml	(revision )
+++ res/values-sw720dp-land/dimens.xml	(revision )
@@ -0,0 +1,9 @@
+<resources>
+
+    <!--
+         Customize dimensions originally defined in res/values/dimens.xml (such as
+         screen margins) for sw720dp devices (e.g. 10" tablets) in landscape here.
+    -->
+    <dimen name="activity_horizontal_margin">128dp</dimen>
+
+</resources>
\ No newline at end of file
Index: src/com/se1/navdrawer/PlanetFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/navdrawer/PlanetFragment.java	(revision )
+++ src/com/se1/navdrawer/PlanetFragment.java	(revision )
@@ -0,0 +1,37 @@
+package com.se1.navdrawer;
+
+import java.util.Locale;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+
+import com.actionbarsherlock.app.SherlockFragment;
+import com.se1.main.R;
+
+public class PlanetFragment extends SherlockFragment {
+	public static final String ARG_PLANET_NUMBER = "planet_number";
+
+	public PlanetFragment() {
+		// Empty constructor required for fragment subclasses
+	}
+
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		View rootView = inflater.inflate(R.layout.fragment_planet, container,
+				false);
+		int i = getArguments().getInt(ARG_PLANET_NUMBER);
+		String planet = getResources().getStringArray(R.array.planets_array)[i];
+
+		int imageId = getResources().getIdentifier(
+				planet.toLowerCase(Locale.getDefault()), "drawable",
+				getActivity().getPackageName());
+		((ImageView) rootView.findViewById(R.id.image))
+				.setImageResource(imageId);
+		getActivity().setTitle(planet);
+		return rootView;
+	}
+}
\ No newline at end of file
Index: res/layout/navigation_drawer_base_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/navigation_drawer_base_layout.xml	(revision )
+++ res/layout/navigation_drawer_base_layout.xml	(revision )
@@ -0,0 +1,35 @@
+<!--  
+	Base activity layout for adding Navigation Drawer in our application.
+	We will use this layout in BaseActivity for showing navigation drawer and Navigation List Item.
+	We are going to extend our all the Activities from this BaseActivty so by default every activity will have this layout.
+	For adding other layout in our activty we have to use below "FrameLayout", as we can not add "setContentView" in this activities.
+	We will use layout inflater to add our layout in below framelayout. 
+	
+	Code example is below:::::
+	
+		getLayoutInflater().inflate(R.layout.activity_navbar_main, frameLayout);
+-->
+
+<android.support.v4.widget.DrawerLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/drawer_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <FrameLayout
+        android:id="@+id/content_frame"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="#fff" />
+
+    <ListView
+        android:id="@+id/left_drawer"
+        android:layout_width="240dp"
+        android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:background="#00bcd4"
+        android:choiceMode="singleChoice"
+        android:divider="@android:color/transparent"
+        android:dividerHeight="0dp" />
+
+</android.support.v4.widget.DrawerLayout>
\ No newline at end of file
Index: src/com/se1/dao/DropBoxAuth.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/dao/DropBoxAuth.java	(revision )
+++ src/com/se1/dao/DropBoxAuth.java	(revision )
@@ -0,0 +1,25 @@
+package com.se1.dao;
+
+
+
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.android.AndroidAuthSession;
+
+import java.io.Serializable;
+
+/**
+ * Created by Abhitej on 3/28/2015.
+ */
+public  class DropBoxAuth implements Serializable {
+
+    public DropboxAPI<AndroidAuthSession> getmApi() {
+        return mApi;
+    }
+
+    public void setmApi(DropboxAPI<AndroidAuthSession> mApi) {
+        this.mApi = mApi;
+    }
+
+    private DropboxAPI<AndroidAuthSession> mApi;
+
+}
Index: src/com/se1/DropBox/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/DropBox/Constants.java	(revision )
+++ src/com/se1/DropBox/Constants.java	(revision )
@@ -0,0 +1,20 @@
+package com.se1.DropBox;
+
+import com.dropbox.client2.session.Session.AccessType;
+
+public class Constants {
+
+	public static final String OVERRIDEMSG = "File name with this name already exists.Do you want to replace this file?";
+	final static public String DROPBOX_APP_KEY = "oujw7a401lgnthn";
+	final static public String DROPBOX_APP_SECRET = "55u78g0394dnh40";
+	public static boolean mLoggedIn = false;
+
+	final static public AccessType ACCESS_TYPE = AccessType.DROPBOX;
+
+	final static public String ACCOUNT_PREFS_NAME = "prefs";
+	final static public String ACCESS_KEY_NAME = "ACCESS_KEY";
+	final static public String ACCESS_SECRET_NAME = "ACCESS_SECRET";
+//	public static final int BOOKMARKS = 4;
+//	public static final int OPENFILE = 5;
+
+}
Index: res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/activity_main.xml	(revision )
+++ res/layout/activity_main.xml	(revision )
@@ -0,0 +1,123 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:weightSum="1"
+    android:background="@color/background_window">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="212dp"
+        android:weightSum="1"
+        android:layout_weight="0.77"
+        android:background="#fff">
+
+        <ImageView
+            android:layout_width="match_parent"
+            android:layout_height="142dp"
+            android:id="@+id/imageView"
+            android:src="@drawable/ic_launcher"
+            android:contentDescription="icon"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_weight="0.43" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="CloudSync"
+            android:id="@+id/textView2"
+            android:textColor="#80deea"
+            android:textSize="42dp"
+            android:layout_marginLeft="95dp"
+            android:layout_marginTop="5dp"
+            android:textStyle="bold"/>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="115dp"
+        android:orientation="vertical">
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textEmailAddress"
+            android:ems="10"
+            android:id="@+id/email"
+            android:hint="email address"
+            android:layout_marginLeft="85dp"
+            android:layout_marginTop="5dp"
+            android:autoText="true"
+            android:textColor="#000"
+            android:editable="false" />
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textPassword"
+            android:ems="10"
+            android:id="@+id/password"
+            android:hint="password"
+            android:layout_marginLeft="85dp"
+            android:layout_marginTop="5dp"
+            android:textColor="#000"
+            style="@style/AppTheme" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+
+        <Button
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Sign In"
+            android:id="@+id/login"
+            android:layout_marginLeft="85dp"
+            android:background="#80deea"
+            android:textColor="#fff"/>
+
+        <Button
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Sign Up"
+            android:id="@+id/signUp"
+            android:onClick="goToRegistration"
+            android:layout_marginLeft="35dp"
+            android:background="#80deea"
+            android:textColor="#fff"/>
+    </LinearLayout>
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="84dp">
+
+        <CheckBox
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Keep me logged in"
+            android:id="@+id/loggedIn"
+            android:layout_above="@+id/password"
+            android:layout_toRightOf="@+id/password"
+            android:layout_toEndOf="@+id/password"
+            android:layout_marginLeft="115dp"
+            android:textColor="#000"
+            android:checked="false"
+            android:backgroundTint="#000"
+            />
+
+        <Button
+            android:layout_width="wrap_content"
+            android:layout_height="37dp"
+            android:text="Forgot Password"
+            android:id="@+id/forgotPassword"
+            android:layout_marginLeft="125dp"
+            android:layout_marginTop="5dp"
+            android:background="#80deea"
+            android:textColor="#fff"/>
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: res/layout/activity_navbar_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/activity_navbar_main.xml	(revision )
+++ res/layout/activity_navbar_main.xml	(revision )
@@ -0,0 +1,26 @@
+<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/drawer_layout"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+
+    <RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent" android:id="@+id/content"
+        android:layout_height="match_parent" >
+    </RelativeLayout>
+
+    <!-- The navigation drawer -->
+
+    <ListView
+        android:id="@+id/left_drawer"
+        android:layout_width="130dp"
+        android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:background="#00bcd4"
+        android:choiceMode="singleChoice"
+        android:divider="#fff"
+        android:dividerHeight="1dp" />
+
+</android.support.v4.widget.DrawerLayout>
\ No newline at end of file
Index: res/layout/activity_reset_password.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/activity_reset_password.xml	(revision )
+++ res/layout/activity_reset_password.xml	(revision )
@@ -0,0 +1,95 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:context="com.se1.Activity.ResetPasswordActivity"
+    >
+
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/linearLayout">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Old Password"
+            android:id="@+id/oldPassLabel"/>
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textPassword"
+            android:ems="10"
+            android:id="@+id/oldPassText" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/linearLayout"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:id="@+id/linearLayout2">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="New Password"
+            android:id="@+id/newPassLabel"
+            />
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textPassword"
+            android:ems="10"
+            android:id="@+id/newPassText" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/linearLayout2"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:id="@+id/linearLayout3">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Confirm Password"
+            android:id="@+id/confirmPasswordlable" />
+
+        <EditText
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:inputType="textPassword"
+            android:ems="10"
+            android:id="@+id/confirmPasswordtext" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/linearLayout3"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true">
+
+        <Button
+            style="?android:attr/buttonStyleSmall"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Reset"
+            android:id="@+id/resetPassword"
+            android:background="#80deea"/>
+    </LinearLayout>
+
+</RelativeLayout>
Index: res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/values/strings.xml	(revision )
+++ res/values/strings.xml	(revision )
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="app_name">CloudSync</string>
+    <string name="action_contact">Contact</string>
+
+    <string-array name="planets_array">
+        <item>Home</item>
+        <item>DropBox</item>
+        <item>Google Drive</item>
+        <item>OneDrive</item>
+        <item>Settings</item>
+    </string-array>
+
+    <string name="drawer_open">Open navigation drawer</string>
+    <string name="drawer_close">Close navigation drawer</string>
+    <string name="action_websearch">Web search</string>
+    <string name="app_not_available">Sorry, there\'s no web browser available</string>
+
+    <string name="Welcome">Welcome to Home page!</string>
+    <string name="NewPass">New Password</string>
+    <string name="OldPass">Old Password</string>
+    <string name="action_settings">Settings</string>
+    <string name="title_activity_register_user">Register</string>
+    <string name="title_activity_settings">Settings</string>
+    <string name="title_activity_reset_password">Reset Password</string>
+    <string name="title_activity_dropbox_login">DropBox Login</string>
+    <string name="hello_world">Hello world!</string>
+    <string name="title_activity_dropbox">Dropbox</string>
+    <string name="title_activity_splash">splash</string>
+    <string name="title_activity_base">BaseActivity</string>
+    <string name="open_drawer">Drawer Open</string>
+    <string name="close_drawer">Drawer Close</string>
+    <string-array name="navigation_drawer_items_array">
+        <item>Home</item>
+        <item>DropBox</item>
+        <item>Google Drive</item>
+    </string-array>
+    <string name="done">Done</string>
+
+    <string name="dropbox">dropbox</string>
+
+    <string name="drop_box">DropBox</string>
+
+    <string name="dropbox_Login">DropBox Login</string>
+
+    <string name="download">Download</string>
+
+
+
+</resources>
\ No newline at end of file
Index: src/com/se1/dao/DatabaseOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/dao/DatabaseOperation.java	(revision )
+++ src/com/se1/dao/DatabaseOperation.java	(revision )
@@ -0,0 +1,105 @@
+package com.se1.dao;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+public class DatabaseOperation {
+
+    // Database fields
+    private static SQLiteDatabase database;
+    private static MySQLiteHelper dbHelper;
+    private String[] allColumns = { MySQLiteHelper.COLUMN1,
+            MySQLiteHelper.COLUMN2,MySQLiteHelper.COLUMN3,
+            MySQLiteHelper.COLUMN4,MySQLiteHelper.COLUMN5};
+
+    public DatabaseOperation(Context context)
+    {
+        dbHelper = new MySQLiteHelper(context);
+    }
+
+    public static void open() throws SQLException {
+
+        if (database == null || !database.isOpen()) {
+            database = dbHelper.getWritableDatabase();
+        }
+
+    }
+
+    public void close()
+    {
+        dbHelper.close();
+    }
+
+    public void insertUser(String emailId,String password,int loggedIn,String firstName,String lastName) {
+        ContentValues values = new ContentValues();
+        values.put(MySQLiteHelper.COLUMN1,emailId);
+        values.put(MySQLiteHelper.COLUMN2,password);
+        values.put(MySQLiteHelper.COLUMN3,loggedIn);
+        values.put(MySQLiteHelper.COLUMN4,firstName);
+        values.put(MySQLiteHelper.COLUMN5,lastName);
+
+        Log.d("emailId",emailId);
+        Log.d("password",password);
+        Log.d("loggedIn in insert", ""+loggedIn);
+        //Log.d("MySQLiteHelper.TABLE_Name",MySQLiteHelper.TABLE_Name);
+        if(MySQLiteHelper.TABLE_Name != null)
+            database.insert(MySQLiteHelper.TABLE_Name, null, values);
+
+    }
+    public User getUserDetail() {
+        String selectQuery = "SELECT  * FROM " + MySQLiteHelper.TABLE_Name;
+        open();
+        Cursor cursor = database.rawQuery(selectQuery, null);
+        String[] data = null;
+        cursor.moveToFirst();
+        if (!cursor.isAfterLast()) {
+            User user = newUser(cursor);
+            return user;
+        }
+
+        return null;
+        //System.out.println("Comment deleted with id: " + id);t
+        //database.delete(MySQLiteHelper.TABLE_COMMENTS, MySQLiteHelper.COLUMN_ID
+        //      + " = " + id, null);
+    }
+
+    public void addSignIn(String emailId)
+    {
+        ContentValues cv = new ContentValues();
+        cv.put(MySQLiteHelper.COLUMN3,1);
+        database.update(MySQLiteHelper.TABLE_Name, cv, MySQLiteHelper.COLUMN1+"=?", new String[]{emailId});
+    }
+    public void forgotPassword(String emailId,int randomNo)
+    {
+        ContentValues cv = new ContentValues();
+        cv.put(MySQLiteHelper.COLUMN2,""+randomNo);
+        database.update(MySQLiteHelper.TABLE_Name, cv, MySQLiteHelper.COLUMN1+"=?", new String[]{emailId});
+    }
+    public void resetPassword(String emailId,String password)
+    {
+        ContentValues cv = new ContentValues();
+        cv.put(MySQLiteHelper.COLUMN2,password);
+        database.update(MySQLiteHelper.TABLE_Name, cv, MySQLiteHelper.COLUMN1+"=?", new String[]{emailId});
+    }
+    public void removeSignIn(String emailId)
+    {
+        ContentValues cv = new ContentValues();
+        cv.put(MySQLiteHelper.COLUMN3,0);
+        database.update(MySQLiteHelper.TABLE_Name, cv, MySQLiteHelper.COLUMN1+"=?", new String[]{emailId});
+    }
+
+
+    private User newUser(Cursor cursor) {
+        User user= new User();
+        user.setEmailId(cursor.getString(0));
+        user.setPassword(cursor.getString(1));
+        user.setLoggedIn(cursor.getInt(2));
+        return user;
+
+    }
+
+}
\ No newline at end of file
Index: res/layout/fragment_test.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/fragment_test.xml	(revision )
+++ res/layout/fragment_test.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center"
+    android:orientation="vertical" >
+
+    <TextView
+        android:id="@+id/textViewPosition"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        android:text="This is a test"
+        android:textSize="50sp" />
+
+</LinearLayout>
\ No newline at end of file
Index: res/layout/drawer_list_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- res/layout/drawer_list_item.xml	(revision )
+++ res/layout/drawer_list_item.xml	(revision )
@@ -0,0 +1,27 @@
+<!--
+  Copyright 2013 The Android Open Source Project
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@android:id/text1"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:textAppearance="?android:attr/textAppearanceListItemSmall"
+    android:gravity="center_vertical"
+    android:paddingLeft="16dp"
+    android:paddingRight="16dp"
+    android:textColor="#fff"
+    android:background="?android:attr/activatedBackgroundIndicator"
+    android:minHeight="?android:attr/listPreferredItemHeightSmall"/>
\ No newline at end of file
Index: src/com/se1/navdrawer/SuperAwesomeCardFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/navdrawer/SuperAwesomeCardFragment.java	(revision )
+++ src/com/se1/navdrawer/SuperAwesomeCardFragment.java	(revision )
@@ -0,0 +1,69 @@
+
+
+package com.se1.navdrawer;
+
+import android.os.Bundle;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.FrameLayout.LayoutParams;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import com.actionbarsherlock.app.SherlockFragment;
+import com.dropbox.client2.DropboxAPI;
+import com.dropbox.client2.android.AndroidAuthSession;
+import com.se1.DropBox.DropboxDownload;
+import com.se1.main.R;
+
+public class SuperAwesomeCardFragment extends SherlockFragment{
+
+	private static final String ARG_POSITION = "position";
+
+	private int position;
+    public static SuperAwesomeCardFragment newInstance(int position) {
+		SuperAwesomeCardFragment f = new SuperAwesomeCardFragment();
+		Bundle b = new Bundle();
+		b.putInt(ARG_POSITION, position);
+        f.setArguments(b);
+		return f;
+	}
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+
+		position = getArguments().getInt(ARG_POSITION);
+	}
+
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+
+		LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+
+		FrameLayout fl = new FrameLayout(getActivity());
+		fl.setLayoutParams(params);
+
+		final int margin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 8, getResources()
+				.getDisplayMetrics());
+
+        super.onCreate(savedInstanceState);
+
+        TextView v = new TextView(getActivity());
+		params.setMargins(margin, margin, margin, margin);
+		v.setLayoutParams(params);
+		v.setLayoutParams(params);
+		v.setGravity(Gravity.CENTER);
+		v.setBackgroundResource(R.drawable.background_card);
+
+        //return tab1;
+		v.setText("Tab  " + (position + 1));
+
+		fl.addView(v);
+		return fl;
+	}
+
+}
\ No newline at end of file
Index: src/com/se1/dao/MySQLiteHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/se1/dao/MySQLiteHelper.java	(revision )
+++ src/com/se1/dao/MySQLiteHelper.java	(revision )
@@ -0,0 +1,47 @@
+package com.se1.dao;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+public class MySQLiteHelper extends SQLiteOpenHelper {
+
+    public static final String TABLE_Name = "User";
+    public static final String COLUMN1 = "emaiId";
+    public static final String COLUMN2 = "password";
+    public static final String COLUMN3 = "loggedIn";
+    public static final String COLUMN4 = "FirstName";
+    public static final String COLUMN5 = "LastName";
+
+    private static final String DATABASE_NAME = "User.db";
+    private static final int DATABASE_VERSION = 5;
+
+    // Database creation sql statement
+    private static final String DATABASE_CREATE = "create table "
+            + TABLE_Name + "(" + COLUMN1
+            + " text not null, "+COLUMN2
+            + " text not null, "+ COLUMN3
+            + " text not null, "+ COLUMN4
+            + " text not null, "+ COLUMN5
+            + " INT not null);";
+
+    public MySQLiteHelper(Context context) {
+        super(context, DATABASE_NAME, null, DATABASE_VERSION);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase database) {
+        database.execSQL(DATABASE_CREATE);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        Log.w(MySQLiteHelper.class.getName(),
+                "Upgrading database from version " + oldVersion + " to "
+                        + newVersion + ", which will destroy all old data");
+        db.execSQL("DROP TABLE IF EXISTS " + TABLE_Name);
+        onCreate(db);
+    }
+
+}
